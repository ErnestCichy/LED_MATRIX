
LED_MATRIX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005784  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004820  08005964  08005964  00015964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a184  0800a184  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a184  0800a184  0001a184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a18c  0800a18c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a18c  0800a18c  0001a18c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a190  0800a190  0001a190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800a194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000df84  2000000c  0800a1a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000df90  0800a1a0  0002df90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185ea  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000329e  00000000  00000000  00038626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  0003b8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003cc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023c7f  00000000  00000000  0003ded0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198d4  00000000  00000000  00061b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcad0  00000000  00000000  0007b423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157ef3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005260  00000000  00000000  00157f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800594c 	.word	0x0800594c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000010 	.word	0x20000010
 800021c:	0800594c 	.word	0x0800594c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_DMA_Init+0x2c>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a08      	ldr	r2, [pc, #32]	; (8000550 <MX_DMA_Init+0x2c>)
 8000530:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_DMA_Init+0x2c>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

}
 8000542:	bf00      	nop
 8000544:	370c      	adds	r7, #12
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40023800 	.word	0x40023800

08000554 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b08c      	sub	sp, #48	; 0x30
 8000558:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	f107 031c 	add.w	r3, r7, #28
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	4b6a      	ldr	r3, [pc, #424]	; (8000714 <MX_GPIO_Init+0x1c0>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a69      	ldr	r2, [pc, #420]	; (8000714 <MX_GPIO_Init+0x1c0>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b67      	ldr	r3, [pc, #412]	; (8000714 <MX_GPIO_Init+0x1c0>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0304 	and.w	r3, r3, #4
 800057e:	61bb      	str	r3, [r7, #24]
 8000580:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000582:	4b64      	ldr	r3, [pc, #400]	; (8000714 <MX_GPIO_Init+0x1c0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a63      	ldr	r2, [pc, #396]	; (8000714 <MX_GPIO_Init+0x1c0>)
 8000588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b61      	ldr	r3, [pc, #388]	; (8000714 <MX_GPIO_Init+0x1c0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000596:	617b      	str	r3, [r7, #20]
 8000598:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b5e      	ldr	r3, [pc, #376]	; (8000714 <MX_GPIO_Init+0x1c0>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a5d      	ldr	r2, [pc, #372]	; (8000714 <MX_GPIO_Init+0x1c0>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b5b      	ldr	r3, [pc, #364]	; (8000714 <MX_GPIO_Init+0x1c0>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b58      	ldr	r3, [pc, #352]	; (8000714 <MX_GPIO_Init+0x1c0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a57      	ldr	r2, [pc, #348]	; (8000714 <MX_GPIO_Init+0x1c0>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b55      	ldr	r3, [pc, #340]	; (8000714 <MX_GPIO_Init+0x1c0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ca:	4b52      	ldr	r3, [pc, #328]	; (8000714 <MX_GPIO_Init+0x1c0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a51      	ldr	r2, [pc, #324]	; (8000714 <MX_GPIO_Init+0x1c0>)
 80005d0:	f043 0320 	orr.w	r3, r3, #32
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b4f      	ldr	r3, [pc, #316]	; (8000714 <MX_GPIO_Init+0x1c0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0320 	and.w	r3, r3, #32
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005e2:	4b4c      	ldr	r3, [pc, #304]	; (8000714 <MX_GPIO_Init+0x1c0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a4b      	ldr	r2, [pc, #300]	; (8000714 <MX_GPIO_Init+0x1c0>)
 80005e8:	f043 0308 	orr.w	r3, r3, #8
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b49      	ldr	r3, [pc, #292]	; (8000714 <MX_GPIO_Init+0x1c0>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0308 	and.w	r3, r3, #8
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005fa:	4b46      	ldr	r3, [pc, #280]	; (8000714 <MX_GPIO_Init+0x1c0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a45      	ldr	r2, [pc, #276]	; (8000714 <MX_GPIO_Init+0x1c0>)
 8000600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b43      	ldr	r3, [pc, #268]	; (8000714 <MX_GPIO_Init+0x1c0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	4840      	ldr	r0, [pc, #256]	; (8000718 <MX_GPIO_Init+0x1c4>)
 8000618:	f001 fe6c 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f244 0181 	movw	r1, #16513	; 0x4081
 8000622:	483e      	ldr	r0, [pc, #248]	; (800071c <MX_GPIO_Init+0x1c8>)
 8000624:	f001 fe66 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062e:	483c      	ldr	r0, [pc, #240]	; (8000720 <MX_GPIO_Init+0x1cc>)
 8000630:	f001 fe60 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2140      	movs	r1, #64	; 0x40
 8000638:	483a      	ldr	r0, [pc, #232]	; (8000724 <MX_GPIO_Init+0x1d0>)
 800063a:	f001 fe5b 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	210f      	movs	r1, #15
 8000642:	4839      	ldr	r0, [pc, #228]	; (8000728 <MX_GPIO_Init+0x1d4>)
 8000644:	f001 fe56 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000648:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800064c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800064e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4619      	mov	r1, r3
 800065e:	4833      	ldr	r0, [pc, #204]	; (800072c <MX_GPIO_Init+0x1d8>)
 8000660:	f001 fcac 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000664:	2340      	movs	r3, #64	; 0x40
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	4619      	mov	r1, r3
 800067a:	4827      	ldr	r0, [pc, #156]	; (8000718 <MX_GPIO_Init+0x1c4>)
 800067c:	f001 fc9e 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000680:	f244 0381 	movw	r3, #16513	; 0x4081
 8000684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000692:	f107 031c 	add.w	r3, r7, #28
 8000696:	4619      	mov	r1, r3
 8000698:	4820      	ldr	r0, [pc, #128]	; (800071c <MX_GPIO_Init+0x1c8>)
 800069a:	f001 fc8f 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	4619      	mov	r1, r3
 80006b6:	481a      	ldr	r0, [pc, #104]	; (8000720 <MX_GPIO_Init+0x1cc>)
 80006b8:	f001 fc80 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006bc:	2340      	movs	r3, #64	; 0x40
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4619      	mov	r1, r3
 80006d2:	4814      	ldr	r0, [pc, #80]	; (8000724 <MX_GPIO_Init+0x1d0>)
 80006d4:	f001 fc72 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006dc:	2300      	movs	r3, #0
 80006de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	480e      	ldr	r0, [pc, #56]	; (8000724 <MX_GPIO_Init+0x1d0>)
 80006ec:	f001 fc66 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006f0:	230f      	movs	r3, #15
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	4808      	ldr	r0, [pc, #32]	; (8000728 <MX_GPIO_Init+0x1d4>)
 8000708:	f001 fc58 	bl	8001fbc <HAL_GPIO_Init>

}
 800070c:	bf00      	nop
 800070e:	3730      	adds	r7, #48	; 0x30
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800
 8000718:	40020000 	.word	0x40020000
 800071c:	40020400 	.word	0x40020400
 8000720:	40021400 	.word	0x40021400
 8000724:	40021800 	.word	0x40021800
 8000728:	40020c00 	.word	0x40020c00
 800072c:	40020800 	.word	0x40020800

08000730 <PANEL.0>:




  void PANEL (uint8_t surface, uint8_t scena)
  	{
 8000730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000732:	b087      	sub	sp, #28
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	460a      	mov	r2, r1
 800073a:	73fb      	strb	r3, [r7, #15]
 800073c:	4613      	mov	r3, r2
 800073e:	73bb      	strb	r3, [r7, #14]
 8000740:	f8c7 c008 	str.w	ip, [r7, #8]

  		  for (int32_t i=0; i<16; i++)		// 'i' mean ROW to send for all picture
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	e134      	b.n	80009b4 <PANEL.0+0x284>
  			  {

  			  for (int32_t j=0; j<8; j++)	//'j' mean BYTES to sent in each ROW - lower and upper in one time
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	e0fe      	b.n	800094e <PANEL.0+0x21e>
  			  {
  				  //for upper part picture
  				bufferSPI[surface][ 0+j] = bufor[scena][surface][(i+ 0)*24 + 16 + (7-j)];	//line R
 8000750:	7bb8      	ldrb	r0, [r7, #14]
 8000752:	7bfc      	ldrb	r4, [r7, #15]
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	f103 0210 	add.w	r2, r3, #16
 8000762:	693b      	ldr	r3, [r7, #16]
 8000764:	f1c3 0307 	rsb	r3, r3, #7
 8000768:	18d5      	adds	r5, r2, r3
 800076a:	7bf9      	ldrb	r1, [r7, #15]
 800076c:	4e96      	ldr	r6, [pc, #600]	; (80009c8 <PANEL.0+0x298>)
 800076e:	4622      	mov	r2, r4
 8000770:	0052      	lsls	r2, r2, #1
 8000772:	4422      	add	r2, r4
 8000774:	0213      	lsls	r3, r2, #8
 8000776:	461a      	mov	r2, r3
 8000778:	4603      	mov	r3, r0
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	4403      	add	r3, r0
 800077e:	029b      	lsls	r3, r3, #10
 8000780:	4413      	add	r3, r2
 8000782:	4433      	add	r3, r6
 8000784:	442b      	add	r3, r5
 8000786:	7818      	ldrb	r0, [r3, #0]
 8000788:	4a90      	ldr	r2, [pc, #576]	; (80009cc <PANEL.0+0x29c>)
 800078a:	460b      	mov	r3, r1
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	440b      	add	r3, r1
 8000790:	011b      	lsls	r3, r3, #4
 8000792:	441a      	add	r2, r3
 8000794:	693b      	ldr	r3, [r7, #16]
 8000796:	4413      	add	r3, r2
 8000798:	4602      	mov	r2, r0
 800079a:	701a      	strb	r2, [r3, #0]
  				bufferSPI[surface][16+j] = bufor[scena][surface][(i+ 0)*24 +  8 + (7-j)];	//line G
 800079c:	7bb8      	ldrb	r0, [r7, #14]
 800079e:	7bfc      	ldrb	r4, [r7, #15]
 80007a0:	697a      	ldr	r2, [r7, #20]
 80007a2:	4613      	mov	r3, r2
 80007a4:	005b      	lsls	r3, r3, #1
 80007a6:	4413      	add	r3, r2
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	f103 0208 	add.w	r2, r3, #8
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	f1c3 0307 	rsb	r3, r3, #7
 80007b4:	18d6      	adds	r6, r2, r3
 80007b6:	7bf9      	ldrb	r1, [r7, #15]
 80007b8:	693b      	ldr	r3, [r7, #16]
 80007ba:	f103 0510 	add.w	r5, r3, #16
 80007be:	4b82      	ldr	r3, [pc, #520]	; (80009c8 <PANEL.0+0x298>)
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4622      	mov	r2, r4
 80007c4:	0052      	lsls	r2, r2, #1
 80007c6:	4422      	add	r2, r4
 80007c8:	0213      	lsls	r3, r2, #8
 80007ca:	461a      	mov	r2, r3
 80007cc:	4603      	mov	r3, r0
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	4403      	add	r3, r0
 80007d2:	029b      	lsls	r3, r3, #10
 80007d4:	4413      	add	r3, r2
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	4433      	add	r3, r6
 80007dc:	7818      	ldrb	r0, [r3, #0]
 80007de:	4a7b      	ldr	r2, [pc, #492]	; (80009cc <PANEL.0+0x29c>)
 80007e0:	460b      	mov	r3, r1
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	440b      	add	r3, r1
 80007e6:	011b      	lsls	r3, r3, #4
 80007e8:	4413      	add	r3, r2
 80007ea:	442b      	add	r3, r5
 80007ec:	4602      	mov	r2, r0
 80007ee:	701a      	strb	r2, [r3, #0]
  				bufferSPI[surface][32+j] = bufor[scena][surface][(i+ 0)*24 +  0 + (7-j)];	//line B
 80007f0:	7bb8      	ldrb	r0, [r7, #14]
 80007f2:	7bfc      	ldrb	r4, [r7, #15]
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	4613      	mov	r3, r2
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	4413      	add	r3, r2
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	461a      	mov	r2, r3
 8000800:	693b      	ldr	r3, [r7, #16]
 8000802:	f1c3 0307 	rsb	r3, r3, #7
 8000806:	18d6      	adds	r6, r2, r3
 8000808:	7bf9      	ldrb	r1, [r7, #15]
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	f103 0520 	add.w	r5, r3, #32
 8000810:	4b6d      	ldr	r3, [pc, #436]	; (80009c8 <PANEL.0+0x298>)
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	4622      	mov	r2, r4
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	4422      	add	r2, r4
 800081a:	0213      	lsls	r3, r2, #8
 800081c:	461a      	mov	r2, r3
 800081e:	4603      	mov	r3, r0
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4403      	add	r3, r0
 8000824:	029b      	lsls	r3, r3, #10
 8000826:	4413      	add	r3, r2
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	4413      	add	r3, r2
 800082c:	4433      	add	r3, r6
 800082e:	7818      	ldrb	r0, [r3, #0]
 8000830:	4a66      	ldr	r2, [pc, #408]	; (80009cc <PANEL.0+0x29c>)
 8000832:	460b      	mov	r3, r1
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	440b      	add	r3, r1
 8000838:	011b      	lsls	r3, r3, #4
 800083a:	4413      	add	r3, r2
 800083c:	442b      	add	r3, r5
 800083e:	4602      	mov	r2, r0
 8000840:	701a      	strb	r2, [r3, #0]

  				  //for lower part picture
  				bufferSPI[surface][ 8+j] = bufor[scena][surface][(i+16)*24 + 16 + (7-j)];	//line R
 8000842:	7bb8      	ldrb	r0, [r7, #14]
 8000844:	7bfc      	ldrb	r4, [r7, #15]
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	f103 0210 	add.w	r2, r3, #16
 800084c:	4613      	mov	r3, r2
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	4413      	add	r3, r2
 8000852:	00db      	lsls	r3, r3, #3
 8000854:	f103 0210 	add.w	r2, r3, #16
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	f1c3 0307 	rsb	r3, r3, #7
 800085e:	18d6      	adds	r6, r2, r3
 8000860:	7bf9      	ldrb	r1, [r7, #15]
 8000862:	693b      	ldr	r3, [r7, #16]
 8000864:	f103 0508 	add.w	r5, r3, #8
 8000868:	4b57      	ldr	r3, [pc, #348]	; (80009c8 <PANEL.0+0x298>)
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	4622      	mov	r2, r4
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	4422      	add	r2, r4
 8000872:	0213      	lsls	r3, r2, #8
 8000874:	461a      	mov	r2, r3
 8000876:	4603      	mov	r3, r0
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	4403      	add	r3, r0
 800087c:	029b      	lsls	r3, r3, #10
 800087e:	4413      	add	r3, r2
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	4413      	add	r3, r2
 8000884:	4433      	add	r3, r6
 8000886:	7818      	ldrb	r0, [r3, #0]
 8000888:	4a50      	ldr	r2, [pc, #320]	; (80009cc <PANEL.0+0x29c>)
 800088a:	460b      	mov	r3, r1
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	440b      	add	r3, r1
 8000890:	011b      	lsls	r3, r3, #4
 8000892:	4413      	add	r3, r2
 8000894:	442b      	add	r3, r5
 8000896:	4602      	mov	r2, r0
 8000898:	701a      	strb	r2, [r3, #0]
  				bufferSPI[surface][24+j] = bufor[scena][surface][(i+16)*24 +  8 + (7-j)];	//line G
 800089a:	7bb8      	ldrb	r0, [r7, #14]
 800089c:	7bfc      	ldrb	r4, [r7, #15]
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	f103 0210 	add.w	r2, r3, #16
 80008a4:	4613      	mov	r3, r2
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	4413      	add	r3, r2
 80008aa:	00db      	lsls	r3, r3, #3
 80008ac:	f103 0208 	add.w	r2, r3, #8
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	f1c3 0307 	rsb	r3, r3, #7
 80008b6:	18d6      	adds	r6, r2, r3
 80008b8:	7bf9      	ldrb	r1, [r7, #15]
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	f103 0518 	add.w	r5, r3, #24
 80008c0:	4b41      	ldr	r3, [pc, #260]	; (80009c8 <PANEL.0+0x298>)
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	4622      	mov	r2, r4
 80008c6:	0052      	lsls	r2, r2, #1
 80008c8:	4422      	add	r2, r4
 80008ca:	0213      	lsls	r3, r2, #8
 80008cc:	461a      	mov	r2, r3
 80008ce:	4603      	mov	r3, r0
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4403      	add	r3, r0
 80008d4:	029b      	lsls	r3, r3, #10
 80008d6:	4413      	add	r3, r2
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	4413      	add	r3, r2
 80008dc:	4433      	add	r3, r6
 80008de:	7818      	ldrb	r0, [r3, #0]
 80008e0:	4a3a      	ldr	r2, [pc, #232]	; (80009cc <PANEL.0+0x29c>)
 80008e2:	460b      	mov	r3, r1
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	440b      	add	r3, r1
 80008e8:	011b      	lsls	r3, r3, #4
 80008ea:	4413      	add	r3, r2
 80008ec:	442b      	add	r3, r5
 80008ee:	4602      	mov	r2, r0
 80008f0:	701a      	strb	r2, [r3, #0]
  				bufferSPI[surface][40+j] = bufor[scena][surface][(i+16)*24 +  0 + (7-j)];	//line B
 80008f2:	7bb8      	ldrb	r0, [r7, #14]
 80008f4:	7bfc      	ldrb	r4, [r7, #15]
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	f103 0210 	add.w	r2, r3, #16
 80008fc:	4613      	mov	r3, r2
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	4413      	add	r3, r2
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	461a      	mov	r2, r3
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	f1c3 0307 	rsb	r3, r3, #7
 800090c:	18d6      	adds	r6, r2, r3
 800090e:	7bf9      	ldrb	r1, [r7, #15]
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8000916:	4b2c      	ldr	r3, [pc, #176]	; (80009c8 <PANEL.0+0x298>)
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4622      	mov	r2, r4
 800091c:	0052      	lsls	r2, r2, #1
 800091e:	4422      	add	r2, r4
 8000920:	0213      	lsls	r3, r2, #8
 8000922:	461a      	mov	r2, r3
 8000924:	4603      	mov	r3, r0
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	4403      	add	r3, r0
 800092a:	029b      	lsls	r3, r3, #10
 800092c:	4413      	add	r3, r2
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	4433      	add	r3, r6
 8000934:	7818      	ldrb	r0, [r3, #0]
 8000936:	4a25      	ldr	r2, [pc, #148]	; (80009cc <PANEL.0+0x29c>)
 8000938:	460b      	mov	r3, r1
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	440b      	add	r3, r1
 800093e:	011b      	lsls	r3, r3, #4
 8000940:	4413      	add	r3, r2
 8000942:	442b      	add	r3, r5
 8000944:	4602      	mov	r2, r0
 8000946:	701a      	strb	r2, [r3, #0]
  			  for (int32_t j=0; j<8; j++)	//'j' mean BYTES to sent in each ROW - lower and upper in one time
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	3301      	adds	r3, #1
 800094c:	613b      	str	r3, [r7, #16]
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	2b07      	cmp	r3, #7
 8000952:	f77f aefd 	ble.w	8000750 <PANEL.0+0x20>
  			  }


  			  HAL_SPI_Transmit(&hspi1, bufferSPI[surface], 48,2); //dla funkcji blokującej potrzeba minimum 2 ms aby wysłać ramkę
 8000956:	7bfa      	ldrb	r2, [r7, #15]
 8000958:	4613      	mov	r3, r2
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	4413      	add	r3, r2
 800095e:	011b      	lsls	r3, r3, #4
 8000960:	4a1a      	ldr	r2, [pc, #104]	; (80009cc <PANEL.0+0x29c>)
 8000962:	1899      	adds	r1, r3, r2
 8000964:	2302      	movs	r3, #2
 8000966:	2230      	movs	r2, #48	; 0x30
 8000968:	4819      	ldr	r0, [pc, #100]	; (80009d0 <PANEL.0+0x2a0>)
 800096a:	f002 ff5e 	bl	800382a <HAL_SPI_Transmit>
  			   //HAL_SPI_Transmit_DMA(&hspi1, Bufor[surface], 48); //z dma trzeba popracować nad wywołaniem funkcji od przerwania dma po zakończeniu transmisji

  			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12,1); // OE  - 0 włączanie zasilania ledów - np do sterowania poziomem jasności
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000974:	4817      	ldr	r0, [pc, #92]	; (80009d4 <PANEL.0+0x2a4>)
 8000976:	f001 fcbd 	bl	80022f4 <HAL_GPIO_WritePin>
  			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0); // LAT - 1 PRZERUTNIK  dane z rejestru na ledy //sprawdzic czy oby na pewno 1
 800097a:	2200      	movs	r2, #0
 800097c:	2140      	movs	r1, #64	; 0x40
 800097e:	4816      	ldr	r0, [pc, #88]	; (80009d8 <PANEL.0+0x2a8>)
 8000980:	f001 fcb8 	bl	80022f4 <HAL_GPIO_WritePin>
  			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1); // LAT - 1 PRZERUTNIK  dane z rejestru na ledy //sprawdzic czy oby na pewno 1
 8000984:	2201      	movs	r2, #1
 8000986:	2140      	movs	r1, #64	; 0x40
 8000988:	4813      	ldr	r0, [pc, #76]	; (80009d8 <PANEL.0+0x2a8>)
 800098a:	f001 fcb3 	bl	80022f4 <HAL_GPIO_WritePin>
  			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0); // LAT - 1 PRZERUTNIK  dane z rejestru na ledy //sprawdzic czy oby na pewno 1
 800098e:	2200      	movs	r2, #0
 8000990:	2140      	movs	r1, #64	; 0x40
 8000992:	4811      	ldr	r0, [pc, #68]	; (80009d8 <PANEL.0+0x2a8>)
 8000994:	f001 fcae 	bl	80022f4 <HAL_GPIO_WritePin>

  			  GPIOD->ODR = (15-i); //wykorzystanie bitów 0,1,2,3 portu GPIOD aby zmniejeszyć czasy wykonania przełączania linii
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	f1c3 020f 	rsb	r2, r3, #15
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <PANEL.0+0x2ac>)
 80009a0:	615a      	str	r2, [r3, #20]

  			  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12,0); // OE  - 0 włączanie zasilania ledów - np do sterowania poziomem jasności
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a8:	480a      	ldr	r0, [pc, #40]	; (80009d4 <PANEL.0+0x2a4>)
 80009aa:	f001 fca3 	bl	80022f4 <HAL_GPIO_WritePin>
  		  for (int32_t i=0; i<16; i++)		// 'i' mean ROW to send for all picture
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	3301      	adds	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	2b0f      	cmp	r3, #15
 80009b8:	f77f aec7 	ble.w	800074a <PANEL.0+0x1a>
  			  }
  }
 80009bc:	bf00      	nop
 80009be:	bf00      	nop
 80009c0:	371c      	adds	r7, #28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000002c 	.word	0x2000002c
 80009cc:	2000482c 	.word	0x2000482c
 80009d0:	2000d8ec 	.word	0x2000d8ec
 80009d4:	40021400 	.word	0x40021400
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020c00 	.word	0x40020c00

080009e0 <main>:
{
 80009e0:	b5b0      	push	{r4, r5, r7, lr}
 80009e2:	b08e      	sub	sp, #56	; 0x38
 80009e4:	af00      	add	r7, sp, #0
int main(void)
 80009e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009ea:	607b      	str	r3, [r7, #4]
  HAL_Init();
 80009ec:	f000 fe47 	bl	800167e <HAL_Init>
  SystemClock_Config();
 80009f0:	f000 fa90 	bl	8000f14 <SystemClock_Config>
  MX_GPIO_Init();
 80009f4:	f7ff fdae 	bl	8000554 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009f8:	f000 fce0 	bl	80013bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009fc:	f000 fd6e 	bl	80014dc <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 8000a00:	f000 fb36 	bl	8001070 <MX_SPI1_Init>
  MX_DMA_Init();
 8000a04:	f7ff fd8e 	bl	8000524 <MX_DMA_Init>
  MX_TIM1_Init();
 8000a08:	f000 fc64 	bl	80012d4 <MX_TIM1_Init>
  MX_NVIC_Init();
 8000a0c:	f000 faf0 	bl	8000ff0 <MX_NVIC_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 8000a10:	4826      	ldr	r0, [pc, #152]	; (8000aac <main+0xcc>)
 8000a12:	f003 fb79 	bl	8004108 <HAL_TIM_Base_Start_IT>
  for (int g=0,d=48; g<18432; g+=576,d+=192)
 8000a16:	2300      	movs	r3, #0
 8000a18:	637b      	str	r3, [r7, #52]	; 0x34
 8000a1a:	2330      	movs	r3, #48	; 0x30
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8000a1e:	e031      	b.n	8000a84 <main+0xa4>
	  for (int f=0,k=0; f<6; f++,k+=96)
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a28:	e022      	b.n	8000a70 <main+0x90>
	  		  for (int z=0; z<96; z++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a2e:	e016      	b.n	8000a5e <main+0x7e>
	  			  przejsciowy[f][z+d] = sonic[z+k+g];
 8000a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a34:	441a      	add	r2, r3
 8000a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a38:	4413      	add	r3, r2
 8000a3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a3e:	4411      	add	r1, r2
 8000a40:	4a1b      	ldr	r2, [pc, #108]	; (8000ab0 <main+0xd0>)
 8000a42:	5cd4      	ldrb	r4, [r2, r3]
 8000a44:	481b      	ldr	r0, [pc, #108]	; (8000ab4 <main+0xd4>)
 8000a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a48:	4613      	mov	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	4413      	add	r3, r2
 8000a4e:	02db      	lsls	r3, r3, #11
 8000a50:	4403      	add	r3, r0
 8000a52:	440b      	add	r3, r1
 8000a54:	4622      	mov	r2, r4
 8000a56:	701a      	strb	r2, [r3, #0]
	  		  for (int z=0; z<96; z++)
 8000a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a60:	2b5f      	cmp	r3, #95	; 0x5f
 8000a62:	dde5      	ble.n	8000a30 <main+0x50>
	  for (int f=0,k=0; f<6; f++,k+=96)
 8000a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a66:	3301      	adds	r3, #1
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	3360      	adds	r3, #96	; 0x60
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a72:	2b05      	cmp	r3, #5
 8000a74:	ddd9      	ble.n	8000a2a <main+0x4a>
  for (int g=0,d=48; g<18432; g+=576,d+=192)
 8000a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a78:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8000a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a80:	33c0      	adds	r3, #192	; 0xc0
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
 8000a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a86:	f5b3 4f90 	cmp.w	r3, #18432	; 0x4800
 8000a8a:	dbc9      	blt.n	8000a20 <main+0x40>
for (int scena=0; scena<6; scena++)
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
 8000a90:	e18e      	b.n	8000db0 <main+0x3d0>
  for (int k=0; k<4; k++) 				//4 przejścia dla 4 najbardziej znaczących bitów
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
 8000a96:	e184      	b.n	8000da2 <main+0x3c2>
  	for (int m=0; m<32; m++) 			//mam 32 linie do przepisania
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61bb      	str	r3, [r7, #24]
 8000a9c:	e17a      	b.n	8000d94 <main+0x3b4>
  		for (int p=0; p<3; p++)			//tu robimy to samo dla trzech kolorów osobno R G B
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
 8000aa2:	e170      	b.n	8000d86 <main+0x3a6>
  			for (int n=0; n<8; n++) 	//tym zapisuję do bufora dane do pierwszej linii dla pajważniejszych pixeli bo (1<<7)
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	e166      	b.n	8000d78 <main+0x398>
 8000aaa:	bf00      	nop
 8000aac:	2000d9b0 	.word	0x2000d9b0
 8000ab0:	08005964 	.word	0x08005964
 8000ab4:	200048ec 	.word	0x200048ec
  	  			bufor[scena][k][p*8 + n + m*24] =  	(( przejsciowy[scena] [p + 3*8*n + 192*m + 3*0]  &  (1<<(7-k)) )<< k) >>(0) |
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4613      	mov	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4413      	add	r3, r2
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	18d1      	adds	r1, r2, r3
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	4613      	mov	r3, r2
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	4413      	add	r3, r2
 8000ad0:	019b      	lsls	r3, r3, #6
 8000ad2:	4419      	add	r1, r3
 8000ad4:	48bb      	ldr	r0, [pc, #748]	; (8000dc4 <main+0x3e4>)
 8000ad6:	6a3a      	ldr	r2, [r7, #32]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	4413      	add	r3, r2
 8000ade:	02db      	lsls	r3, r3, #11
 8000ae0:	4403      	add	r3, r0
 8000ae2:	440b      	add	r3, r1
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2201      	movs	r2, #1
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	ea01 0203 	and.w	r2, r1, r3
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	b259      	sxtb	r1, r3
  									 	 			(( przejsciowy[scena] [p + 3*8*n + 192*m + 3*1]  &  (1<<(7-k)) )<< k) >>(1) |
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4613      	mov	r3, r2
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	4413      	add	r3, r2
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	18d0      	adds	r0, r2, r3
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	4613      	mov	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	4413      	add	r3, r2
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	4403      	add	r3, r0
 8000b1c:	1cd8      	adds	r0, r3, #3
 8000b1e:	4ca9      	ldr	r4, [pc, #676]	; (8000dc4 <main+0x3e4>)
 8000b20:	6a3a      	ldr	r2, [r7, #32]
 8000b22:	4613      	mov	r3, r2
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	4413      	add	r3, r2
 8000b28:	02db      	lsls	r3, r3, #11
 8000b2a:	4423      	add	r3, r4
 8000b2c:	4403      	add	r3, r0
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	f1c3 0307 	rsb	r3, r3, #7
 8000b38:	2201      	movs	r2, #1
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	ea00 0203 	and.w	r2, r0, r3
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	105b      	asrs	r3, r3, #1
  	  			bufor[scena][k][p*8 + n + m*24] =  	(( przejsciowy[scena] [p + 3*8*n + 192*m + 3*0]  &  (1<<(7-k)) )<< k) >>(0) |
 8000b4a:	b25b      	sxtb	r3, r3
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	b259      	sxtb	r1, r3
													(( przejsciowy[scena] [p + 3*8*n + 192*m + 3*2]  &  (1<<(7-k)) )<< k) >>(2) |
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4613      	mov	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	18d0      	adds	r0, r2, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4613      	mov	r3, r2
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	4413      	add	r3, r2
 8000b68:	019b      	lsls	r3, r3, #6
 8000b6a:	4403      	add	r3, r0
 8000b6c:	1d98      	adds	r0, r3, #6
 8000b6e:	4c95      	ldr	r4, [pc, #596]	; (8000dc4 <main+0x3e4>)
 8000b70:	6a3a      	ldr	r2, [r7, #32]
 8000b72:	4613      	mov	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	4413      	add	r3, r2
 8000b78:	02db      	lsls	r3, r3, #11
 8000b7a:	4423      	add	r3, r4
 8000b7c:	4403      	add	r3, r0
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	f1c3 0307 	rsb	r3, r3, #7
 8000b88:	2201      	movs	r2, #1
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	ea00 0203 	and.w	r2, r0, r3
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	109b      	asrs	r3, r3, #2
  									 	 			(( przejsciowy[scena] [p + 3*8*n + 192*m + 3*1]  &  (1<<(7-k)) )<< k) >>(1) |
 8000b9a:	b25b      	sxtb	r3, r3
 8000b9c:	430b      	orrs	r3, r1
 8000b9e:	b259      	sxtb	r1, r3
													(( przejsciowy[scena] [p + 3*8*n + 192*m + 3*3]  &  (1<<(7-k)) )<< k) >>(3) |
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	4413      	add	r3, r2
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	461a      	mov	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	18d0      	adds	r0, r2, r3
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	005b      	lsls	r3, r3, #1
 8000bb6:	4413      	add	r3, r2
 8000bb8:	019b      	lsls	r3, r3, #6
 8000bba:	4403      	add	r3, r0
 8000bbc:	f103 0009 	add.w	r0, r3, #9
 8000bc0:	4c80      	ldr	r4, [pc, #512]	; (8000dc4 <main+0x3e4>)
 8000bc2:	6a3a      	ldr	r2, [r7, #32]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	4413      	add	r3, r2
 8000bca:	02db      	lsls	r3, r3, #11
 8000bcc:	4423      	add	r3, r4
 8000bce:	4403      	add	r3, r0
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2201      	movs	r2, #1
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	ea00 0203 	and.w	r2, r0, r3
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	10db      	asrs	r3, r3, #3
													(( przejsciowy[scena] [p + 3*8*n + 192*m + 3*2]  &  (1<<(7-k)) )<< k) >>(2) |
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	430b      	orrs	r3, r1
 8000bf0:	b259      	sxtb	r1, r3
													(( przejsciowy[scena] [p + 3*8*n + 192*m + 3*4]  &  (1<<(7-k)) )<< k) >>(4) |
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	4413      	add	r3, r2
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	18d0      	adds	r0, r2, r3
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4613      	mov	r3, r2
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	4413      	add	r3, r2
 8000c0a:	019b      	lsls	r3, r3, #6
 8000c0c:	4403      	add	r3, r0
 8000c0e:	f103 000c 	add.w	r0, r3, #12
 8000c12:	4c6c      	ldr	r4, [pc, #432]	; (8000dc4 <main+0x3e4>)
 8000c14:	6a3a      	ldr	r2, [r7, #32]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	02db      	lsls	r3, r3, #11
 8000c1e:	4423      	add	r3, r4
 8000c20:	4403      	add	r3, r0
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4618      	mov	r0, r3
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	f1c3 0307 	rsb	r3, r3, #7
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	ea00 0203 	and.w	r2, r0, r3
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	111b      	asrs	r3, r3, #4
													(( przejsciowy[scena] [p + 3*8*n + 192*m + 3*3]  &  (1<<(7-k)) )<< k) >>(3) |
 8000c3e:	b25b      	sxtb	r3, r3
 8000c40:	430b      	orrs	r3, r1
 8000c42:	b259      	sxtb	r1, r3
													(( przejsciowy[scena] [p + 3*8*n + 192*m + 3*5]  &  (1<<(7-k)) )<< k) >>(5) |
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4613      	mov	r3, r2
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	4413      	add	r3, r2
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	18d0      	adds	r0, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	019b      	lsls	r3, r3, #6
 8000c5e:	4403      	add	r3, r0
 8000c60:	f103 000f 	add.w	r0, r3, #15
 8000c64:	4c57      	ldr	r4, [pc, #348]	; (8000dc4 <main+0x3e4>)
 8000c66:	6a3a      	ldr	r2, [r7, #32]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	02db      	lsls	r3, r3, #11
 8000c70:	4423      	add	r3, r4
 8000c72:	4403      	add	r3, r0
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	f1c3 0307 	rsb	r3, r3, #7
 8000c7e:	2201      	movs	r2, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	ea00 0203 	and.w	r2, r0, r3
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	115b      	asrs	r3, r3, #5
													(( przejsciowy[scena] [p + 3*8*n + 192*m + 3*4]  &  (1<<(7-k)) )<< k) >>(4) |
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	430b      	orrs	r3, r1
 8000c94:	b259      	sxtb	r1, r3
													(( przejsciowy[scena] [p + 3*8*n + 192*m + 3*6]  &  (1<<(7-k)) )<< k) >>(6) |
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	18d0      	adds	r0, r2, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	4413      	add	r3, r2
 8000cae:	019b      	lsls	r3, r3, #6
 8000cb0:	4403      	add	r3, r0
 8000cb2:	f103 0012 	add.w	r0, r3, #18
 8000cb6:	4c43      	ldr	r4, [pc, #268]	; (8000dc4 <main+0x3e4>)
 8000cb8:	6a3a      	ldr	r2, [r7, #32]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4413      	add	r3, r2
 8000cc0:	02db      	lsls	r3, r3, #11
 8000cc2:	4423      	add	r3, r4
 8000cc4:	4403      	add	r3, r0
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	f1c3 0307 	rsb	r3, r3, #7
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	ea00 0203 	and.w	r2, r0, r3
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	119b      	asrs	r3, r3, #6
													(( przejsciowy[scena] [p + 3*8*n + 192*m + 3*5]  &  (1<<(7-k)) )<< k) >>(5) |
 8000ce2:	b25b      	sxtb	r3, r3
 8000ce4:	430b      	orrs	r3, r1
 8000ce6:	b259      	sxtb	r1, r3
													(( przejsciowy[scena] [p + 3*8*n + 192*m + 3*7]  &  (1<<(7-k)) )<< k) >>(7) ;
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4613      	mov	r3, r2
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	4413      	add	r3, r2
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	18d0      	adds	r0, r2, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	4413      	add	r3, r2
 8000d00:	019b      	lsls	r3, r3, #6
 8000d02:	4403      	add	r3, r0
 8000d04:	f103 0015 	add.w	r0, r3, #21
 8000d08:	4c2e      	ldr	r4, [pc, #184]	; (8000dc4 <main+0x3e4>)
 8000d0a:	6a3a      	ldr	r2, [r7, #32]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	4413      	add	r3, r2
 8000d12:	02db      	lsls	r3, r3, #11
 8000d14:	4423      	add	r3, r4
 8000d16:	4403      	add	r3, r0
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2201      	movs	r2, #1
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	ea00 0203 	and.w	r2, r0, r3
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	11db      	asrs	r3, r3, #7
													(( przejsciowy[scena] [p + 3*8*n + 192*m + 3*6]  &  (1<<(7-k)) )<< k) >>(6) |
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	430b      	orrs	r3, r1
 8000d38:	b25c      	sxtb	r4, r3
  	  			bufor[scena][k][p*8 + n + m*24] =  	(( przejsciowy[scena] [p + 3*8*n + 192*m + 3*0]  &  (1<<(7-k)) )<< k) >>(0) |
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	00da      	lsls	r2, r3, #3
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	18d1      	adds	r1, r2, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4613      	mov	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	18c8      	adds	r0, r1, r3
													(( przejsciowy[scena] [p + 3*8*n + 192*m + 3*6]  &  (1<<(7-k)) )<< k) >>(6) |
 8000d4e:	b2e5      	uxtb	r5, r4
  	  			bufor[scena][k][p*8 + n + m*24] =  	(( przejsciowy[scena] [p + 3*8*n + 192*m + 3*0]  &  (1<<(7-k)) )<< k) >>(0) |
 8000d50:	4c1d      	ldr	r4, [pc, #116]	; (8000dc8 <main+0x3e8>)
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	6a39      	ldr	r1, [r7, #32]
 8000d56:	461a      	mov	r2, r3
 8000d58:	0052      	lsls	r2, r2, #1
 8000d5a:	441a      	add	r2, r3
 8000d5c:	0213      	lsls	r3, r2, #8
 8000d5e:	461a      	mov	r2, r3
 8000d60:	460b      	mov	r3, r1
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	440b      	add	r3, r1
 8000d66:	029b      	lsls	r3, r3, #10
 8000d68:	4413      	add	r3, r2
 8000d6a:	4423      	add	r3, r4
 8000d6c:	4403      	add	r3, r0
 8000d6e:	462a      	mov	r2, r5
 8000d70:	701a      	strb	r2, [r3, #0]
  			for (int n=0; n<8; n++) 	//tym zapisuję do bufora dane do pierwszej linii dla pajważniejszych pixeli bo (1<<7)
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	3301      	adds	r3, #1
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	2b07      	cmp	r3, #7
 8000d7c:	f77f ae9c 	ble.w	8000ab8 <main+0xd8>
  		for (int p=0; p<3; p++)			//tu robimy to samo dla trzech kolorów osobno R G B
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	3301      	adds	r3, #1
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	f77f ae8b 	ble.w	8000aa4 <main+0xc4>
  	for (int m=0; m<32; m++) 			//mam 32 linie do przepisania
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	3301      	adds	r3, #1
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	2b1f      	cmp	r3, #31
 8000d98:	f77f ae81 	ble.w	8000a9e <main+0xbe>
  for (int k=0; k<4; k++) 				//4 przejścia dla 4 najbardziej znaczących bitów
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	f77f ae77 	ble.w	8000a98 <main+0xb8>
for (int scena=0; scena<6; scena++)
 8000daa:	6a3b      	ldr	r3, [r7, #32]
 8000dac:	3301      	adds	r3, #1
 8000dae:	623b      	str	r3, [r7, #32]
 8000db0:	6a3b      	ldr	r3, [r7, #32]
 8000db2:	2b05      	cmp	r3, #5
 8000db4:	f77f ae6d 	ble.w	8000a92 <main+0xb2>




  uint32_t czas = HAL_GetTick();
 8000db8:	f000 fcb2 	bl	8001720 <HAL_GetTick>
 8000dbc:	60f8      	str	r0, [r7, #12]
  uint32_t a=0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	e003      	b.n	8000dcc <main+0x3ec>
 8000dc4:	200048ec 	.word	0x200048ec
 8000dc8:	2000002c 	.word	0x2000002c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 PANEL (0,a);
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	1d3a      	adds	r2, r7, #4
 8000dd2:	4694      	mov	ip, r2
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f7ff fcaa 	bl	8000730 <PANEL.0>
	 PANEL (0,a);
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	1d3a      	adds	r2, r7, #4
 8000de2:	4694      	mov	ip, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff fca2 	bl	8000730 <PANEL.0>
	 PANEL (1,a);
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	1d3a      	adds	r2, r7, #4
 8000df2:	4694      	mov	ip, r2
 8000df4:	4619      	mov	r1, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff fc9a 	bl	8000730 <PANEL.0>
	 PANEL (0,a);
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	1d3a      	adds	r2, r7, #4
 8000e02:	4694      	mov	ip, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff fc92 	bl	8000730 <PANEL.0>

	 PANEL (2,a);
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	1d3a      	adds	r2, r7, #4
 8000e12:	4694      	mov	ip, r2
 8000e14:	4619      	mov	r1, r3
 8000e16:	2002      	movs	r0, #2
 8000e18:	f7ff fc8a 	bl	8000730 <PANEL.0>

	 PANEL (0,a);
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	1d3a      	adds	r2, r7, #4
 8000e22:	4694      	mov	ip, r2
 8000e24:	4619      	mov	r1, r3
 8000e26:	2000      	movs	r0, #0
 8000e28:	f7ff fc82 	bl	8000730 <PANEL.0>
	 PANEL (1,a);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	1d3a      	adds	r2, r7, #4
 8000e32:	4694      	mov	ip, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	f7ff fc7a 	bl	8000730 <PANEL.0>
	 PANEL (0,a);
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	1d3a      	adds	r2, r7, #4
 8000e42:	4694      	mov	ip, r2
 8000e44:	4619      	mov	r1, r3
 8000e46:	2000      	movs	r0, #0
 8000e48:	f7ff fc72 	bl	8000730 <PANEL.0>

	 PANEL (3,a);
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	1d3a      	adds	r2, r7, #4
 8000e52:	4694      	mov	ip, r2
 8000e54:	4619      	mov	r1, r3
 8000e56:	2003      	movs	r0, #3
 8000e58:	f7ff fc6a 	bl	8000730 <PANEL.0>

	 PANEL (0,a);
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	1d3a      	adds	r2, r7, #4
 8000e62:	4694      	mov	ip, r2
 8000e64:	4619      	mov	r1, r3
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff fc62 	bl	8000730 <PANEL.0>
	 PANEL (1,a);
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	1d3a      	adds	r2, r7, #4
 8000e72:	4694      	mov	ip, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	2001      	movs	r0, #1
 8000e78:	f7ff fc5a 	bl	8000730 <PANEL.0>
	 PANEL (0,a);
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	1d3a      	adds	r2, r7, #4
 8000e82:	4694      	mov	ip, r2
 8000e84:	4619      	mov	r1, r3
 8000e86:	2000      	movs	r0, #0
 8000e88:	f7ff fc52 	bl	8000730 <PANEL.0>
	 PANEL (0,a);
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	1d3a      	adds	r2, r7, #4
 8000e92:	4694      	mov	ip, r2
 8000e94:	4619      	mov	r1, r3
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff fc4a 	bl	8000730 <PANEL.0>

	 PANEL (2,a);
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	1d3a      	adds	r2, r7, #4
 8000ea2:	4694      	mov	ip, r2
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	f7ff fc42 	bl	8000730 <PANEL.0>

	 PANEL (1,a);
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	1d3a      	adds	r2, r7, #4
 8000eb2:	4694      	mov	ip, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f7ff fc3a 	bl	8000730 <PANEL.0>
	 PANEL (0,a);
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	1d3a      	adds	r2, r7, #4
 8000ec2:	4694      	mov	ip, r2
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff fc32 	bl	8000730 <PANEL.0>
	 PANEL (0,a);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	1d3a      	adds	r2, r7, #4
 8000ed2:	4694      	mov	ip, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f7ff fc2a 	bl	8000730 <PANEL.0>
	 PANEL (1,a);
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	1d3a      	adds	r2, r7, #4
 8000ee2:	4694      	mov	ip, r2
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f7ff fc22 	bl	8000730 <PANEL.0>





	   if ((HAL_GetTick() - czas) > 70)
 8000eec:	f000 fc18 	bl	8001720 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b46      	cmp	r3, #70	; 0x46
 8000ef8:	f67f af68 	bls.w	8000dcc <main+0x3ec>
	   {
		   czas = HAL_GetTick();
 8000efc:	f000 fc10 	bl	8001720 <HAL_GetTick>
 8000f00:	60f8      	str	r0, [r7, #12]
		   if(a>=5){a=0;}
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	2b04      	cmp	r3, #4
 8000f06:	d901      	bls.n	8000f0c <main+0x52c>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
//		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12,1); // OE  - 0 włączanie zasilania ledów - np do sterowania poziomem jasności

//		   HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12,0);
		   a++;
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	60bb      	str	r3, [r7, #8]
	 PANEL (0,a);
 8000f12:	e75b      	b.n	8000dcc <main+0x3ec>

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b094      	sub	sp, #80	; 0x50
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	2230      	movs	r2, #48	; 0x30
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f004 fd0a 	bl	800593c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f38:	f001 fb58 	bl	80025ec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3c:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <SystemClock_Config+0xd4>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f40:	4a29      	ldr	r2, [pc, #164]	; (8000fe8 <SystemClock_Config+0xd4>)
 8000f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f46:	6413      	str	r3, [r2, #64]	; 0x40
 8000f48:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <SystemClock_Config+0xd4>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f54:	4b25      	ldr	r3, [pc, #148]	; (8000fec <SystemClock_Config+0xd8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a24      	ldr	r2, [pc, #144]	; (8000fec <SystemClock_Config+0xd8>)
 8000f5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b22      	ldr	r3, [pc, #136]	; (8000fec <SystemClock_Config+0xd8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f70:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f76:	2302      	movs	r3, #2
 8000f78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f80:	2304      	movs	r3, #4
 8000f82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000f84:	23d8      	movs	r3, #216	; 0xd8
 8000f86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f8c:	2309      	movs	r3, #9
 8000f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f90:	f107 0320 	add.w	r3, r7, #32
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 fb89 	bl	80026ac <HAL_RCC_OscConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000fa0:	f000 f860 	bl	8001064 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fa4:	f001 fb32 	bl	800260c <HAL_PWREx_EnableOverDrive>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fae:	f000 f859 	bl	8001064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb2:	230f      	movs	r3, #15
 8000fb4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fbe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2107      	movs	r1, #7
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fe0f 	bl	8002bf4 <HAL_RCC_ClockConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000fdc:	f000 f842 	bl	8001064 <Error_Handler>
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	3750      	adds	r7, #80	; 0x50
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40007000 	.word	0x40007000

08000ff0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	203b      	movs	r0, #59	; 0x3b
 8000ffa:	f000 fc9c 	bl	8001936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ffe:	203b      	movs	r0, #59	; 0x3b
 8001000:	f000 fcb5 	bl	800196e <HAL_NVIC_EnableIRQ>
  /* SPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	2023      	movs	r0, #35	; 0x23
 800100a:	f000 fc94 	bl	8001936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800100e:	2023      	movs	r0, #35	; 0x23
 8001010:	f000 fcad 	bl	800196e <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	2100      	movs	r1, #0
 8001018:	2019      	movs	r0, #25
 800101a:	f000 fc8c 	bl	8001936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800101e:	2019      	movs	r0, #25
 8001020:	f000 fca5 	bl	800196e <HAL_NVIC_EnableIRQ>
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	480a      	ldr	r0, [pc, #40]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001034:	f001 f977 	bl	8002326 <HAL_GPIO_TogglePin>
	if (flaga > 15) {flaga=1;}
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d903      	bls.n	8001048 <HAL_TIM_PeriodElapsedCallback+0x20>
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
	else flaga++;
}
 8001046:	e005      	b.n	8001054 <HAL_TIM_PeriodElapsedCallback+0x2c>
	else flaga++;
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b03      	ldr	r3, [pc, #12]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001052:	701a      	strb	r2, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40020400 	.word	0x40020400
 8001060:	20000028 	.word	0x20000028

08001064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i
}
 800106a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800106c:	e7fe      	b.n	800106c <Error_Handler+0x8>
	...

08001070 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <MX_SPI1_Init+0x74>)
 8001076:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <MX_SPI1_Init+0x78>)
 8001078:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800107a:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <MX_SPI1_Init+0x74>)
 800107c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001080:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <MX_SPI1_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MX_SPI1_Init+0x74>)
 800108a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800108e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <MX_SPI1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <MX_SPI1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_SPI1_Init+0x74>)
 800109e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_SPI1_Init+0x74>)
 80010a6:	2208      	movs	r2, #8
 80010a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_SPI1_Init+0x74>)
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_SPI1_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <MX_SPI1_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_SPI1_Init+0x74>)
 80010be:	2207      	movs	r2, #7
 80010c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <MX_SPI1_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_SPI1_Init+0x74>)
 80010ca:	2208      	movs	r2, #8
 80010cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_SPI1_Init+0x74>)
 80010d0:	f002 fb00 	bl	80036d4 <HAL_SPI_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80010da:	f7ff ffc3 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	2000d8ec 	.word	0x2000d8ec
 80010e8:	40013000 	.word	0x40013000

080010ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a2e      	ldr	r2, [pc, #184]	; (80011c4 <HAL_SPI_MspInit+0xd8>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d155      	bne.n	80011ba <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800110e:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <HAL_SPI_MspInit+0xdc>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	4a2d      	ldr	r2, [pc, #180]	; (80011c8 <HAL_SPI_MspInit+0xdc>)
 8001114:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001118:	6453      	str	r3, [r2, #68]	; 0x44
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <HAL_SPI_MspInit+0xdc>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <HAL_SPI_MspInit+0xdc>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a27      	ldr	r2, [pc, #156]	; (80011c8 <HAL_SPI_MspInit+0xdc>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <HAL_SPI_MspInit+0xdc>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800113e:	23a0      	movs	r3, #160	; 0xa0
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800114e:	2305      	movs	r3, #5
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	481c      	ldr	r0, [pc, #112]	; (80011cc <HAL_SPI_MspInit+0xe0>)
 800115a:	f000 ff2f 	bl	8001fbc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_SPI_MspInit+0xe4>)
 8001160:	4a1c      	ldr	r2, [pc, #112]	; (80011d4 <HAL_SPI_MspInit+0xe8>)
 8001162:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_SPI_MspInit+0xe4>)
 8001166:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800116a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <HAL_SPI_MspInit+0xe4>)
 800116e:	2240      	movs	r2, #64	; 0x40
 8001170:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_SPI_MspInit+0xe4>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <HAL_SPI_MspInit+0xe4>)
 800117a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001180:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <HAL_SPI_MspInit+0xe4>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <HAL_SPI_MspInit+0xe4>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800118c:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <HAL_SPI_MspInit+0xe4>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_SPI_MspInit+0xe4>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_SPI_MspInit+0xe4>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800119e:	480c      	ldr	r0, [pc, #48]	; (80011d0 <HAL_SPI_MspInit+0xe4>)
 80011a0:	f000 fc00 	bl	80019a4 <HAL_DMA_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 80011aa:	f7ff ff5b 	bl	8001064 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a07      	ldr	r2, [pc, #28]	; (80011d0 <HAL_SPI_MspInit+0xe4>)
 80011b2:	655a      	str	r2, [r3, #84]	; 0x54
 80011b4:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <HAL_SPI_MspInit+0xe4>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40013000 	.word	0x40013000
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020000 	.word	0x40020000
 80011d0:	2000d950 	.word	0x2000d950
 80011d4:	40026458 	.word	0x40026458

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_MspInit+0x44>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a0e      	ldr	r2, [pc, #56]	; (800121c <HAL_MspInit+0x44>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <HAL_MspInit+0x44>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_MspInit+0x44>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <HAL_MspInit+0x44>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_MspInit+0x44>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <NMI_Handler+0x4>

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <MemManage_Handler+0x4>

08001232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <UsageFault_Handler+0x4>

0800123e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126c:	f000 fa44 	bl	80016f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800127a:	f002 ffbd 	bl	80041f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000d9b0 	.word	0x2000d9b0

08001288 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <SPI1_IRQHandler+0x10>)
 800128e:	f002 fc3b 	bl	8003b08 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000d8ec 	.word	0x2000d8ec

0800129c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <DMA2_Stream3_IRQHandler+0x10>)
 80012a2:	f000 fc4f 	bl	8001b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000d950 	.word	0x2000d950

080012b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012b4:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <SystemInit+0x20>)
 80012b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ba:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <SystemInit+0x20>)
 80012bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <MX_TIM1_Init+0xa0>)
 80012f4:	4a20      	ldr	r2, [pc, #128]	; (8001378 <MX_TIM1_Init+0xa4>)
 80012f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 215;
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <MX_TIM1_Init+0xa0>)
 80012fa:	22d7      	movs	r2, #215	; 0xd7
 80012fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_TIM1_Init+0xa0>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_TIM1_Init+0xa0>)
 8001306:	f240 32e7 	movw	r2, #999	; 0x3e7
 800130a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_TIM1_Init+0xa0>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <MX_TIM1_Init+0xa0>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <MX_TIM1_Init+0xa0>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800131e:	4815      	ldr	r0, [pc, #84]	; (8001374 <MX_TIM1_Init+0xa0>)
 8001320:	f002 fe9a 	bl	8004058 <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800132a:	f7ff fe9b 	bl	8001064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001332:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	480e      	ldr	r0, [pc, #56]	; (8001374 <MX_TIM1_Init+0xa0>)
 800133c:	f003 f87c 	bl	8004438 <HAL_TIM_ConfigClockSource>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001346:	f7ff fe8d 	bl	8001064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4619      	mov	r1, r3
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <MX_TIM1_Init+0xa0>)
 800135c:	f003 fa98 	bl	8004890 <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001366:	f7ff fe7d 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000d9b0 	.word	0x2000d9b0
 8001378:	40010000 	.word	0x40010000

0800137c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <HAL_TIM_Base_MspInit+0x38>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d10b      	bne.n	80013a6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_TIM_Base_MspInit+0x3c>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <HAL_TIM_Base_MspInit+0x3c>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <HAL_TIM_Base_MspInit+0x3c>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40010000 	.word	0x40010000
 80013b8:	40023800 	.word	0x40023800

080013bc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013c2:	4a15      	ldr	r2, [pc, #84]	; (8001418 <MX_USART3_UART_Init+0x5c>)
 80013c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013d4:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013e2:	220c      	movs	r2, #12
 80013e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e6:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013f2:	4b08      	ldr	r3, [pc, #32]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_USART3_UART_Init+0x58>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_USART3_UART_Init+0x58>)
 8001400:	f003 faf2 	bl	80049e8 <HAL_UART_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800140a:	f7ff fe2b 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	2000d9fc 	.word	0x2000d9fc
 8001418:	40004800 	.word	0x40004800

0800141c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b0aa      	sub	sp, #168	; 0xa8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2280      	movs	r2, #128	; 0x80
 800143a:	2100      	movs	r1, #0
 800143c:	4618      	mov	r0, r3
 800143e:	f004 fa7d 	bl	800593c <memset>
  if(uartHandle->Instance==USART3)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a22      	ldr	r2, [pc, #136]	; (80014d0 <HAL_UART_MspInit+0xb4>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d13c      	bne.n	80014c6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800144c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001450:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001452:	2300      	movs	r3, #0
 8001454:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4618      	mov	r0, r3
 800145c:	f001 fdf0 	bl	8003040 <HAL_RCCEx_PeriphCLKConfig>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001466:	f7ff fdfd 	bl	8001064 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <HAL_UART_MspInit+0xb8>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a19      	ldr	r2, [pc, #100]	; (80014d4 <HAL_UART_MspInit+0xb8>)
 8001470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <HAL_UART_MspInit+0xb8>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001482:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <HAL_UART_MspInit+0xb8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <HAL_UART_MspInit+0xb8>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_UART_MspInit+0xb8>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800149a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800149e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014b4:	2307      	movs	r3, #7
 80014b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	; (80014d8 <HAL_UART_MspInit+0xbc>)
 80014c2:	f000 fd7b 	bl	8001fbc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80014c6:	bf00      	nop
 80014c8:	37a8      	adds	r7, #168	; 0xa8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40004800 	.word	0x40004800
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020c00 	.word	0x40020c00

080014dc <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ea:	2206      	movs	r2, #6
 80014ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014f6:	2202      	movs	r2, #2
 80014f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001508:	2200      	movs	r2, #0
 800150a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800150e:	2201      	movs	r2, #1
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001514:	2201      	movs	r2, #1
 8001516:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800151a:	2200      	movs	r2, #0
 800151c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001520:	f000 ff1b 	bl	800235a <HAL_PCD_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800152a:	f7ff fd9b 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	2000da84 	.word	0x2000da84

08001538 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b0aa      	sub	sp, #168	; 0xa8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2280      	movs	r2, #128	; 0x80
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f004 f9ef 	bl	800593c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001566:	d159      	bne.n	800161c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001568:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800156c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800156e:	2300      	movs	r3, #0
 8001570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4618      	mov	r0, r3
 800157a:	f001 fd61 	bl	8003040 <HAL_RCCEx_PeriphCLKConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001584:	f7ff fd6e 	bl	8001064 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	4b26      	ldr	r3, [pc, #152]	; (8001624 <HAL_PCD_MspInit+0xec>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	4a25      	ldr	r2, [pc, #148]	; (8001624 <HAL_PCD_MspInit+0xec>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6313      	str	r3, [r2, #48]	; 0x30
 8001594:	4b23      	ldr	r3, [pc, #140]	; (8001624 <HAL_PCD_MspInit+0xec>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80015a0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80015a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	2303      	movs	r3, #3
 80015b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015ba:	230a      	movs	r3, #10
 80015bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015c4:	4619      	mov	r1, r3
 80015c6:	4818      	ldr	r0, [pc, #96]	; (8001628 <HAL_PCD_MspInit+0xf0>)
 80015c8:	f000 fcf8 	bl	8001fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015e4:	4619      	mov	r1, r3
 80015e6:	4810      	ldr	r0, [pc, #64]	; (8001628 <HAL_PCD_MspInit+0xf0>)
 80015e8:	f000 fce8 	bl	8001fbc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <HAL_PCD_MspInit+0xec>)
 80015ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f0:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <HAL_PCD_MspInit+0xec>)
 80015f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f6:	6353      	str	r3, [r2, #52]	; 0x34
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_PCD_MspInit+0xec>)
 80015fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <HAL_PCD_MspInit+0xec>)
 8001606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <HAL_PCD_MspInit+0xec>)
 800160a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800160e:	6453      	str	r3, [r2, #68]	; 0x44
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <HAL_PCD_MspInit+0xec>)
 8001612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800161c:	bf00      	nop
 800161e:	37a8      	adds	r7, #168	; 0xa8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000

0800162c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001664 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001630:	480d      	ldr	r0, [pc, #52]	; (8001668 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001632:	490e      	ldr	r1, [pc, #56]	; (800166c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001648:	4c0b      	ldr	r4, [pc, #44]	; (8001678 <LoopFillZerobss+0x26>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001656:	f7ff fe2b 	bl	80012b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165a:	f004 f94b 	bl	80058f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165e:	f7ff f9bf 	bl	80009e0 <main>
  bx  lr    
 8001662:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001664:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001670:	0800a194 	.word	0x0800a194
  ldr r2, =_sbss
 8001674:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001678:	2000df90 	.word	0x2000df90

0800167c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC_IRQHandler>

0800167e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001682:	2003      	movs	r0, #3
 8001684:	f000 f94c 	bl	8001920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001688:	2000      	movs	r0, #0
 800168a:	f000 f805 	bl	8001698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800168e:	f7ff fda3 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_InitTick+0x54>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_InitTick+0x58>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f967 	bl	800198a <HAL_SYSTICK_Config>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00e      	b.n	80016e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d80a      	bhi.n	80016e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016cc:	2200      	movs	r2, #0
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f000 f92f 	bl	8001936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d8:	4a06      	ldr	r2, [pc, #24]	; (80016f4 <HAL_InitTick+0x5c>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e000      	b.n	80016e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000008 	.word	0x20000008
 80016f4:	20000004 	.word	0x20000004

080016f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_IncTick+0x20>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x24>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a04      	ldr	r2, [pc, #16]	; (800171c <HAL_IncTick+0x24>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000008 	.word	0x20000008
 800171c:	2000df8c 	.word	0x2000df8c

08001720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <HAL_GetTick+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	2000df8c 	.word	0x2000df8c

08001738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff ffee 	bl	8001720 <HAL_GetTick>
 8001744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d005      	beq.n	800175e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001752:	4b0a      	ldr	r3, [pc, #40]	; (800177c <HAL_Delay+0x44>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800175e:	bf00      	nop
 8001760:	f7ff ffde 	bl	8001720 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d8f7      	bhi.n	8001760 <HAL_Delay+0x28>
  {
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008

08001780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800179c:	4013      	ands	r3, r2
 800179e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <__NVIC_SetPriorityGrouping+0x44>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ae:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <__NVIC_SetPriorityGrouping+0x40>)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	60d3      	str	r3, [r2, #12]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00
 80017c4:	05fa0000 	.word	0x05fa0000

080017c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	0a1b      	lsrs	r3, r3, #8
 80017d2:	f003 0307 	and.w	r3, r3, #7
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	db0b      	blt.n	800180e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	f003 021f 	and.w	r2, r3, #31
 80017fc:	4907      	ldr	r1, [pc, #28]	; (800181c <__NVIC_EnableIRQ+0x38>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2001      	movs	r0, #1
 8001806:	fa00 f202 	lsl.w	r2, r0, r2
 800180a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000e100 	.word	0xe000e100

08001820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db0a      	blt.n	800184a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	490c      	ldr	r1, [pc, #48]	; (800186c <__NVIC_SetPriority+0x4c>)
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	440b      	add	r3, r1
 8001844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001848:	e00a      	b.n	8001860 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4908      	ldr	r1, [pc, #32]	; (8001870 <__NVIC_SetPriority+0x50>)
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	3b04      	subs	r3, #4
 8001858:	0112      	lsls	r2, r2, #4
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	440b      	add	r3, r1
 800185e:	761a      	strb	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	e000e100 	.word	0xe000e100
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f1c3 0307 	rsb	r3, r3, #7
 800188e:	2b04      	cmp	r3, #4
 8001890:	bf28      	it	cs
 8001892:	2304      	movcs	r3, #4
 8001894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3304      	adds	r3, #4
 800189a:	2b06      	cmp	r3, #6
 800189c:	d902      	bls.n	80018a4 <NVIC_EncodePriority+0x30>
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3b03      	subs	r3, #3
 80018a2:	e000      	b.n	80018a6 <NVIC_EncodePriority+0x32>
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	401a      	ands	r2, r3
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	43d9      	mvns	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	4313      	orrs	r3, r2
         );
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3724      	adds	r7, #36	; 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ec:	d301      	bcc.n	80018f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00f      	b.n	8001912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <SysTick_Config+0x40>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fa:	210f      	movs	r1, #15
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001900:	f7ff ff8e 	bl	8001820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <SysTick_Config+0x40>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <SysTick_Config+0x40>)
 800190c:	2207      	movs	r2, #7
 800190e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	e000e010 	.word	0xe000e010

08001920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff29 	bl	8001780 <__NVIC_SetPriorityGrouping>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001948:	f7ff ff3e 	bl	80017c8 <__NVIC_GetPriorityGrouping>
 800194c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	6978      	ldr	r0, [r7, #20]
 8001954:	f7ff ff8e 	bl	8001874 <NVIC_EncodePriority>
 8001958:	4602      	mov	r2, r0
 800195a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff5d 	bl	8001820 <__NVIC_SetPriority>
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff31 	bl	80017e4 <__NVIC_EnableIRQ>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffa2 	bl	80018dc <SysTick_Config>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff feb6 	bl	8001720 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e099      	b.n	8001af4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0201 	bic.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019e0:	e00f      	b.n	8001a02 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019e2:	f7ff fe9d 	bl	8001720 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b05      	cmp	r3, #5
 80019ee:	d908      	bls.n	8001a02 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2220      	movs	r2, #32
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2203      	movs	r2, #3
 80019fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e078      	b.n	8001af4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1e8      	bne.n	80019e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a18:	697a      	ldr	r2, [r7, #20]
 8001a1a:	4b38      	ldr	r3, [pc, #224]	; (8001afc <HAL_DMA_Init+0x158>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d107      	bne.n	8001a6c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a64:	4313      	orrs	r3, r2
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f023 0307 	bic.w	r3, r3, #7
 8001a82:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d117      	bne.n	8001ac6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d00e      	beq.n	8001ac6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 fa0b 	bl	8001ec4 <DMA_CheckFifoParam>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2240      	movs	r2, #64	; 0x40
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e016      	b.n	8001af4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f9c2 	bl	8001e58 <DMA_CalcBaseAndBitshift>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001adc:	223f      	movs	r2, #63	; 0x3f
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	e010803f 	.word	0xe010803f

08001b00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d004      	beq.n	8001b1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2280      	movs	r2, #128	; 0x80
 8001b18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00c      	b.n	8001b38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2205      	movs	r2, #5
 8001b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0201 	bic.w	r2, r2, #1
 8001b34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001b50:	4b8e      	ldr	r3, [pc, #568]	; (8001d8c <HAL_DMA_IRQHandler+0x248>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a8e      	ldr	r2, [pc, #568]	; (8001d90 <HAL_DMA_IRQHandler+0x24c>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	0a9b      	lsrs	r3, r3, #10
 8001b5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6e:	2208      	movs	r2, #8
 8001b70:	409a      	lsls	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d01a      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d013      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0204 	bic.w	r2, r2, #4
 8001b96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9c:	2208      	movs	r2, #8
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba8:	f043 0201 	orr.w	r2, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d012      	beq.n	8001be6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bde:	f043 0202 	orr.w	r2, r3, #2
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bea:	2204      	movs	r2, #4
 8001bec:	409a      	lsls	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d012      	beq.n	8001c1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d00b      	beq.n	8001c1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c08:	2204      	movs	r2, #4
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c14:	f043 0204 	orr.w	r2, r3, #4
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c20:	2210      	movs	r2, #16
 8001c22:	409a      	lsls	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d043      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d03c      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3e:	2210      	movs	r2, #16
 8001c40:	409a      	lsls	r2, r3
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d018      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d108      	bne.n	8001c74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d024      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	4798      	blx	r3
 8001c72:	e01f      	b.n	8001cb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d01b      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4798      	blx	r3
 8001c84:	e016      	b.n	8001cb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d107      	bne.n	8001ca4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0208 	bic.w	r2, r2, #8
 8001ca2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb8:	2220      	movs	r2, #32
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 808f 	beq.w	8001de4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 8087 	beq.w	8001de4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cda:	2220      	movs	r2, #32
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b05      	cmp	r3, #5
 8001cec:	d136      	bne.n	8001d5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f022 0216 	bic.w	r2, r2, #22
 8001cfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695a      	ldr	r2, [r3, #20]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d103      	bne.n	8001d1e <HAL_DMA_IRQHandler+0x1da>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d007      	beq.n	8001d2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0208 	bic.w	r2, r2, #8
 8001d2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d32:	223f      	movs	r2, #63	; 0x3f
 8001d34:	409a      	lsls	r2, r3
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d07e      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	4798      	blx	r3
        }
        return;
 8001d5a:	e079      	b.n	8001e50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d01d      	beq.n	8001da6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10d      	bne.n	8001d94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d031      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	4798      	blx	r3
 8001d88:	e02c      	b.n	8001de4 <HAL_DMA_IRQHandler+0x2a0>
 8001d8a:	bf00      	nop
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d023      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	4798      	blx	r3
 8001da4:	e01e      	b.n	8001de4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10f      	bne.n	8001dd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0210 	bic.w	r2, r2, #16
 8001dc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d032      	beq.n	8001e52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d022      	beq.n	8001e3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2205      	movs	r2, #5
 8001dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0201 	bic.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	3301      	adds	r3, #1
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d307      	bcc.n	8001e2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1f2      	bne.n	8001e10 <HAL_DMA_IRQHandler+0x2cc>
 8001e2a:	e000      	b.n	8001e2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	4798      	blx	r3
 8001e4e:	e000      	b.n	8001e52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e50:	bf00      	nop
    }
  }
}
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	3b10      	subs	r3, #16
 8001e68:	4a13      	ldr	r2, [pc, #76]	; (8001eb8 <DMA_CalcBaseAndBitshift+0x60>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	091b      	lsrs	r3, r3, #4
 8001e70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e72:	4a12      	ldr	r2, [pc, #72]	; (8001ebc <DMA_CalcBaseAndBitshift+0x64>)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4413      	add	r3, r2
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d908      	bls.n	8001e98 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ec0 <DMA_CalcBaseAndBitshift+0x68>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	1d1a      	adds	r2, r3, #4
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	659a      	str	r2, [r3, #88]	; 0x58
 8001e96:	e006      	b.n	8001ea6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b08      	ldr	r3, [pc, #32]	; (8001ec0 <DMA_CalcBaseAndBitshift+0x68>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	aaaaaaab 	.word	0xaaaaaaab
 8001ebc:	0800a17c 	.word	0x0800a17c
 8001ec0:	fffffc00 	.word	0xfffffc00

08001ec4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d11f      	bne.n	8001f1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d856      	bhi.n	8001f92 <DMA_CheckFifoParam+0xce>
 8001ee4:	a201      	add	r2, pc, #4	; (adr r2, 8001eec <DMA_CheckFifoParam+0x28>)
 8001ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eea:	bf00      	nop
 8001eec:	08001efd 	.word	0x08001efd
 8001ef0:	08001f0f 	.word	0x08001f0f
 8001ef4:	08001efd 	.word	0x08001efd
 8001ef8:	08001f93 	.word	0x08001f93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d046      	beq.n	8001f96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f0c:	e043      	b.n	8001f96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f16:	d140      	bne.n	8001f9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f1c:	e03d      	b.n	8001f9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f26:	d121      	bne.n	8001f6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d837      	bhi.n	8001f9e <DMA_CheckFifoParam+0xda>
 8001f2e:	a201      	add	r2, pc, #4	; (adr r2, 8001f34 <DMA_CheckFifoParam+0x70>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001f45 	.word	0x08001f45
 8001f38:	08001f4b 	.word	0x08001f4b
 8001f3c:	08001f45 	.word	0x08001f45
 8001f40:	08001f5d 	.word	0x08001f5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
      break;
 8001f48:	e030      	b.n	8001fac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d025      	beq.n	8001fa2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f5a:	e022      	b.n	8001fa2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f64:	d11f      	bne.n	8001fa6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f6a:	e01c      	b.n	8001fa6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d903      	bls.n	8001f7a <DMA_CheckFifoParam+0xb6>
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d003      	beq.n	8001f80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f78:	e018      	b.n	8001fac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f7e:	e015      	b.n	8001fac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d00e      	beq.n	8001faa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f90:	e00b      	b.n	8001faa <DMA_CheckFifoParam+0xe6>
      break;
 8001f92:	bf00      	nop
 8001f94:	e00a      	b.n	8001fac <DMA_CheckFifoParam+0xe8>
      break;
 8001f96:	bf00      	nop
 8001f98:	e008      	b.n	8001fac <DMA_CheckFifoParam+0xe8>
      break;
 8001f9a:	bf00      	nop
 8001f9c:	e006      	b.n	8001fac <DMA_CheckFifoParam+0xe8>
      break;
 8001f9e:	bf00      	nop
 8001fa0:	e004      	b.n	8001fac <DMA_CheckFifoParam+0xe8>
      break;
 8001fa2:	bf00      	nop
 8001fa4:	e002      	b.n	8001fac <DMA_CheckFifoParam+0xe8>
      break;   
 8001fa6:	bf00      	nop
 8001fa8:	e000      	b.n	8001fac <DMA_CheckFifoParam+0xe8>
      break;
 8001faa:	bf00      	nop
    }
  } 
  
  return status; 
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop

08001fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	e169      	b.n	80022b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fdc:	2201      	movs	r2, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	f040 8158 	bne.w	80022aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d005      	beq.n	8002012 <HAL_GPIO_Init+0x56>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d130      	bne.n	8002074 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002048:	2201      	movs	r2, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 0201 	and.w	r2, r3, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b03      	cmp	r3, #3
 800207e:	d017      	beq.n	80020b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d123      	bne.n	8002104 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	08da      	lsrs	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3208      	adds	r2, #8
 80020c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	220f      	movs	r2, #15
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	08da      	lsrs	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3208      	adds	r2, #8
 80020fe:	69b9      	ldr	r1, [r7, #24]
 8002100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0203 	and.w	r2, r3, #3
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80b2 	beq.w	80022aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002146:	4b60      	ldr	r3, [pc, #384]	; (80022c8 <HAL_GPIO_Init+0x30c>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	4a5f      	ldr	r2, [pc, #380]	; (80022c8 <HAL_GPIO_Init+0x30c>)
 800214c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002150:	6453      	str	r3, [r2, #68]	; 0x44
 8002152:	4b5d      	ldr	r3, [pc, #372]	; (80022c8 <HAL_GPIO_Init+0x30c>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800215e:	4a5b      	ldr	r2, [pc, #364]	; (80022cc <HAL_GPIO_Init+0x310>)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	3302      	adds	r3, #2
 8002166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	220f      	movs	r2, #15
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a52      	ldr	r2, [pc, #328]	; (80022d0 <HAL_GPIO_Init+0x314>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d02b      	beq.n	80021e2 <HAL_GPIO_Init+0x226>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a51      	ldr	r2, [pc, #324]	; (80022d4 <HAL_GPIO_Init+0x318>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d025      	beq.n	80021de <HAL_GPIO_Init+0x222>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a50      	ldr	r2, [pc, #320]	; (80022d8 <HAL_GPIO_Init+0x31c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01f      	beq.n	80021da <HAL_GPIO_Init+0x21e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4f      	ldr	r2, [pc, #316]	; (80022dc <HAL_GPIO_Init+0x320>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d019      	beq.n	80021d6 <HAL_GPIO_Init+0x21a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4e      	ldr	r2, [pc, #312]	; (80022e0 <HAL_GPIO_Init+0x324>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <HAL_GPIO_Init+0x216>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4d      	ldr	r2, [pc, #308]	; (80022e4 <HAL_GPIO_Init+0x328>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00d      	beq.n	80021ce <HAL_GPIO_Init+0x212>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4c      	ldr	r2, [pc, #304]	; (80022e8 <HAL_GPIO_Init+0x32c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d007      	beq.n	80021ca <HAL_GPIO_Init+0x20e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4b      	ldr	r2, [pc, #300]	; (80022ec <HAL_GPIO_Init+0x330>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d101      	bne.n	80021c6 <HAL_GPIO_Init+0x20a>
 80021c2:	2307      	movs	r3, #7
 80021c4:	e00e      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021c6:	2308      	movs	r3, #8
 80021c8:	e00c      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021ca:	2306      	movs	r3, #6
 80021cc:	e00a      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021ce:	2305      	movs	r3, #5
 80021d0:	e008      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021d2:	2304      	movs	r3, #4
 80021d4:	e006      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021d6:	2303      	movs	r3, #3
 80021d8:	e004      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021da:	2302      	movs	r3, #2
 80021dc:	e002      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_GPIO_Init+0x228>
 80021e2:	2300      	movs	r3, #0
 80021e4:	69fa      	ldr	r2, [r7, #28]
 80021e6:	f002 0203 	and.w	r2, r2, #3
 80021ea:	0092      	lsls	r2, r2, #2
 80021ec:	4093      	lsls	r3, r2
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021f4:	4935      	ldr	r1, [pc, #212]	; (80022cc <HAL_GPIO_Init+0x310>)
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	089b      	lsrs	r3, r3, #2
 80021fa:	3302      	adds	r3, #2
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002202:	4b3b      	ldr	r3, [pc, #236]	; (80022f0 <HAL_GPIO_Init+0x334>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d003      	beq.n	8002226 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002226:	4a32      	ldr	r2, [pc, #200]	; (80022f0 <HAL_GPIO_Init+0x334>)
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800222c:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <HAL_GPIO_Init+0x334>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002250:	4a27      	ldr	r2, [pc, #156]	; (80022f0 <HAL_GPIO_Init+0x334>)
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002256:	4b26      	ldr	r3, [pc, #152]	; (80022f0 <HAL_GPIO_Init+0x334>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800227a:	4a1d      	ldr	r2, [pc, #116]	; (80022f0 <HAL_GPIO_Init+0x334>)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002280:	4b1b      	ldr	r3, [pc, #108]	; (80022f0 <HAL_GPIO_Init+0x334>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a4:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <HAL_GPIO_Init+0x334>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	3301      	adds	r3, #1
 80022ae:	61fb      	str	r3, [r7, #28]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	2b0f      	cmp	r3, #15
 80022b4:	f67f ae92 	bls.w	8001fdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3724      	adds	r7, #36	; 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40013800 	.word	0x40013800
 80022d0:	40020000 	.word	0x40020000
 80022d4:	40020400 	.word	0x40020400
 80022d8:	40020800 	.word	0x40020800
 80022dc:	40020c00 	.word	0x40020c00
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40021400 	.word	0x40021400
 80022e8:	40021800 	.word	0x40021800
 80022ec:	40021c00 	.word	0x40021c00
 80022f0:	40013c00 	.word	0x40013c00

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002310:	e003      	b.n	800231a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	619a      	str	r2, [r3, #24]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002326:	b480      	push	{r7}
 8002328:	b085      	sub	sp, #20
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	460b      	mov	r3, r1
 8002330:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002338:	887a      	ldrh	r2, [r7, #2]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4013      	ands	r3, r2
 800233e:	041a      	lsls	r2, r3, #16
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	43d9      	mvns	r1, r3
 8002344:	887b      	ldrh	r3, [r7, #2]
 8002346:	400b      	ands	r3, r1
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	619a      	str	r2, [r3, #24]
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800235a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800235c:	b08f      	sub	sp, #60	; 0x3c
 800235e:	af0a      	add	r7, sp, #40	; 0x28
 8002360:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e116      	b.n	800259a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff f8d6 	bl	8001538 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2203      	movs	r2, #3
 8002390:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f002 fff6 	bl	800539c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	687e      	ldr	r6, [r7, #4]
 80023b8:	466d      	mov	r5, sp
 80023ba:	f106 0410 	add.w	r4, r6, #16
 80023be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80023ce:	1d33      	adds	r3, r6, #4
 80023d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d2:	6838      	ldr	r0, [r7, #0]
 80023d4:	f002 ff5a 	bl	800528c <USB_CoreInit>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2202      	movs	r2, #2
 80023e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0d7      	b.n	800259a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f002 ffe4 	bl	80053be <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
 80023fa:	e04a      	b.n	8002492 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	333d      	adds	r3, #61	; 0x3d
 800240c:	2201      	movs	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	333c      	adds	r3, #60	; 0x3c
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	b298      	uxth	r0, r3
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	3344      	adds	r3, #68	; 0x44
 8002438:	4602      	mov	r2, r0
 800243a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	3340      	adds	r3, #64	; 0x40
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002450:	7bfa      	ldrb	r2, [r7, #15]
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	4613      	mov	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	3348      	adds	r3, #72	; 0x48
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	334c      	adds	r3, #76	; 0x4c
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002478:	7bfa      	ldrb	r2, [r7, #15]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	3354      	adds	r3, #84	; 0x54
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	3301      	adds	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	429a      	cmp	r2, r3
 800249a:	d3af      	bcc.n	80023fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	e044      	b.n	800252c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	4413      	add	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024e4:	7bfa      	ldrb	r2, [r7, #15]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	3301      	adds	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	429a      	cmp	r2, r3
 8002534:	d3b5      	bcc.n	80024a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	603b      	str	r3, [r7, #0]
 800253c:	687e      	ldr	r6, [r7, #4]
 800253e:	466d      	mov	r5, sp
 8002540:	f106 0410 	add.w	r4, r6, #16
 8002544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800254a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800254c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002550:	e885 0003 	stmia.w	r5, {r0, r1}
 8002554:	1d33      	adds	r3, r6, #4
 8002556:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002558:	6838      	ldr	r0, [r7, #0]
 800255a:	f002 ff7d 	bl	8005458 <USB_DevInit>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e014      	b.n	800259a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	2b01      	cmp	r3, #1
 8002586:	d102      	bne.n	800258e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f80b 	bl	80025a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f003 f94b 	bl	800582e <USB_DevDisconnect>

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080025a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025d2:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	10000003 	.word	0x10000003

080025ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a04      	ldr	r2, [pc, #16]	; (8002608 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fa:	6013      	str	r3, [r2, #0]
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40007000 	.word	0x40007000

0800260c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002616:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	4a22      	ldr	r2, [pc, #136]	; (80026a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800261c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002620:	6413      	str	r3, [r2, #64]	; 0x40
 8002622:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800262e:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002638:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800263a:	f7ff f871 	bl	8001720 <HAL_GetTick>
 800263e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002640:	e009      	b.n	8002656 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002642:	f7ff f86d 	bl	8001720 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002650:	d901      	bls.n	8002656 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e022      	b.n	800269c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002656:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002662:	d1ee      	bne.n	8002642 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002664:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0f      	ldr	r2, [pc, #60]	; (80026a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800266a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800266e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002670:	f7ff f856 	bl	8001720 <HAL_GetTick>
 8002674:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002676:	e009      	b.n	800268c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002678:	f7ff f852 	bl	8001720 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002686:	d901      	bls.n	800268c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e007      	b.n	800269c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002698:	d1ee      	bne.n	8002678 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40007000 	.word	0x40007000

080026ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80026b4:	2300      	movs	r3, #0
 80026b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e291      	b.n	8002be6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 8087 	beq.w	80027de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026d0:	4b96      	ldr	r3, [pc, #600]	; (800292c <HAL_RCC_OscConfig+0x280>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f003 030c 	and.w	r3, r3, #12
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d00c      	beq.n	80026f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026dc:	4b93      	ldr	r3, [pc, #588]	; (800292c <HAL_RCC_OscConfig+0x280>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d112      	bne.n	800270e <HAL_RCC_OscConfig+0x62>
 80026e8:	4b90      	ldr	r3, [pc, #576]	; (800292c <HAL_RCC_OscConfig+0x280>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f4:	d10b      	bne.n	800270e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f6:	4b8d      	ldr	r3, [pc, #564]	; (800292c <HAL_RCC_OscConfig+0x280>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d06c      	beq.n	80027dc <HAL_RCC_OscConfig+0x130>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d168      	bne.n	80027dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e26b      	b.n	8002be6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002716:	d106      	bne.n	8002726 <HAL_RCC_OscConfig+0x7a>
 8002718:	4b84      	ldr	r3, [pc, #528]	; (800292c <HAL_RCC_OscConfig+0x280>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a83      	ldr	r2, [pc, #524]	; (800292c <HAL_RCC_OscConfig+0x280>)
 800271e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	e02e      	b.n	8002784 <HAL_RCC_OscConfig+0xd8>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10c      	bne.n	8002748 <HAL_RCC_OscConfig+0x9c>
 800272e:	4b7f      	ldr	r3, [pc, #508]	; (800292c <HAL_RCC_OscConfig+0x280>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a7e      	ldr	r2, [pc, #504]	; (800292c <HAL_RCC_OscConfig+0x280>)
 8002734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	4b7c      	ldr	r3, [pc, #496]	; (800292c <HAL_RCC_OscConfig+0x280>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a7b      	ldr	r2, [pc, #492]	; (800292c <HAL_RCC_OscConfig+0x280>)
 8002740:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002744:	6013      	str	r3, [r2, #0]
 8002746:	e01d      	b.n	8002784 <HAL_RCC_OscConfig+0xd8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002750:	d10c      	bne.n	800276c <HAL_RCC_OscConfig+0xc0>
 8002752:	4b76      	ldr	r3, [pc, #472]	; (800292c <HAL_RCC_OscConfig+0x280>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a75      	ldr	r2, [pc, #468]	; (800292c <HAL_RCC_OscConfig+0x280>)
 8002758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b73      	ldr	r3, [pc, #460]	; (800292c <HAL_RCC_OscConfig+0x280>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a72      	ldr	r2, [pc, #456]	; (800292c <HAL_RCC_OscConfig+0x280>)
 8002764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	e00b      	b.n	8002784 <HAL_RCC_OscConfig+0xd8>
 800276c:	4b6f      	ldr	r3, [pc, #444]	; (800292c <HAL_RCC_OscConfig+0x280>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a6e      	ldr	r2, [pc, #440]	; (800292c <HAL_RCC_OscConfig+0x280>)
 8002772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002776:	6013      	str	r3, [r2, #0]
 8002778:	4b6c      	ldr	r3, [pc, #432]	; (800292c <HAL_RCC_OscConfig+0x280>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a6b      	ldr	r2, [pc, #428]	; (800292c <HAL_RCC_OscConfig+0x280>)
 800277e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d013      	beq.n	80027b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7fe ffc8 	bl	8001720 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002794:	f7fe ffc4 	bl	8001720 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	; 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e21f      	b.n	8002be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	4b61      	ldr	r3, [pc, #388]	; (800292c <HAL_RCC_OscConfig+0x280>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0xe8>
 80027b2:	e014      	b.n	80027de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe ffb4 	bl	8001720 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027bc:	f7fe ffb0 	bl	8001720 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b64      	cmp	r3, #100	; 0x64
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e20b      	b.n	8002be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ce:	4b57      	ldr	r3, [pc, #348]	; (800292c <HAL_RCC_OscConfig+0x280>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x110>
 80027da:	e000      	b.n	80027de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d069      	beq.n	80028be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ea:	4b50      	ldr	r3, [pc, #320]	; (800292c <HAL_RCC_OscConfig+0x280>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00b      	beq.n	800280e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f6:	4b4d      	ldr	r3, [pc, #308]	; (800292c <HAL_RCC_OscConfig+0x280>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d11c      	bne.n	800283c <HAL_RCC_OscConfig+0x190>
 8002802:	4b4a      	ldr	r3, [pc, #296]	; (800292c <HAL_RCC_OscConfig+0x280>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d116      	bne.n	800283c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800280e:	4b47      	ldr	r3, [pc, #284]	; (800292c <HAL_RCC_OscConfig+0x280>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_RCC_OscConfig+0x17a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d001      	beq.n	8002826 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e1df      	b.n	8002be6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002826:	4b41      	ldr	r3, [pc, #260]	; (800292c <HAL_RCC_OscConfig+0x280>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	493d      	ldr	r1, [pc, #244]	; (800292c <HAL_RCC_OscConfig+0x280>)
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283a:	e040      	b.n	80028be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d023      	beq.n	800288c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002844:	4b39      	ldr	r3, [pc, #228]	; (800292c <HAL_RCC_OscConfig+0x280>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a38      	ldr	r2, [pc, #224]	; (800292c <HAL_RCC_OscConfig+0x280>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fe ff66 	bl	8001720 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002858:	f7fe ff62 	bl	8001720 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e1bd      	b.n	8002be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286a:	4b30      	ldr	r3, [pc, #192]	; (800292c <HAL_RCC_OscConfig+0x280>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d0f0      	beq.n	8002858 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002876:	4b2d      	ldr	r3, [pc, #180]	; (800292c <HAL_RCC_OscConfig+0x280>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4929      	ldr	r1, [pc, #164]	; (800292c <HAL_RCC_OscConfig+0x280>)
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]
 800288a:	e018      	b.n	80028be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800288c:	4b27      	ldr	r3, [pc, #156]	; (800292c <HAL_RCC_OscConfig+0x280>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a26      	ldr	r2, [pc, #152]	; (800292c <HAL_RCC_OscConfig+0x280>)
 8002892:	f023 0301 	bic.w	r3, r3, #1
 8002896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe ff42 	bl	8001720 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a0:	f7fe ff3e 	bl	8001720 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e199      	b.n	8002be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b2:	4b1e      	ldr	r3, [pc, #120]	; (800292c <HAL_RCC_OscConfig+0x280>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d038      	beq.n	800293c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d019      	beq.n	8002906 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d2:	4b16      	ldr	r3, [pc, #88]	; (800292c <HAL_RCC_OscConfig+0x280>)
 80028d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d6:	4a15      	ldr	r2, [pc, #84]	; (800292c <HAL_RCC_OscConfig+0x280>)
 80028d8:	f043 0301 	orr.w	r3, r3, #1
 80028dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028de:	f7fe ff1f 	bl	8001720 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e6:	f7fe ff1b 	bl	8001720 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e176      	b.n	8002be6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f8:	4b0c      	ldr	r3, [pc, #48]	; (800292c <HAL_RCC_OscConfig+0x280>)
 80028fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x23a>
 8002904:	e01a      	b.n	800293c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002906:	4b09      	ldr	r3, [pc, #36]	; (800292c <HAL_RCC_OscConfig+0x280>)
 8002908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290a:	4a08      	ldr	r2, [pc, #32]	; (800292c <HAL_RCC_OscConfig+0x280>)
 800290c:	f023 0301 	bic.w	r3, r3, #1
 8002910:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002912:	f7fe ff05 	bl	8001720 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002918:	e00a      	b.n	8002930 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291a:	f7fe ff01 	bl	8001720 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d903      	bls.n	8002930 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e15c      	b.n	8002be6 <HAL_RCC_OscConfig+0x53a>
 800292c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002930:	4b91      	ldr	r3, [pc, #580]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1ee      	bne.n	800291a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 80a4 	beq.w	8002a92 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294a:	4b8b      	ldr	r3, [pc, #556]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10d      	bne.n	8002972 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002956:	4b88      	ldr	r3, [pc, #544]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	4a87      	ldr	r2, [pc, #540]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 800295c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002960:	6413      	str	r3, [r2, #64]	; 0x40
 8002962:	4b85      	ldr	r3, [pc, #532]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296a:	60bb      	str	r3, [r7, #8]
 800296c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800296e:	2301      	movs	r3, #1
 8002970:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002972:	4b82      	ldr	r3, [pc, #520]	; (8002b7c <HAL_RCC_OscConfig+0x4d0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d118      	bne.n	80029b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800297e:	4b7f      	ldr	r3, [pc, #508]	; (8002b7c <HAL_RCC_OscConfig+0x4d0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a7e      	ldr	r2, [pc, #504]	; (8002b7c <HAL_RCC_OscConfig+0x4d0>)
 8002984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298a:	f7fe fec9 	bl	8001720 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002992:	f7fe fec5 	bl	8001720 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b64      	cmp	r3, #100	; 0x64
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e120      	b.n	8002be6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a4:	4b75      	ldr	r3, [pc, #468]	; (8002b7c <HAL_RCC_OscConfig+0x4d0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d106      	bne.n	80029c6 <HAL_RCC_OscConfig+0x31a>
 80029b8:	4b6f      	ldr	r3, [pc, #444]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 80029ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029bc:	4a6e      	ldr	r2, [pc, #440]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 80029be:	f043 0301 	orr.w	r3, r3, #1
 80029c2:	6713      	str	r3, [r2, #112]	; 0x70
 80029c4:	e02d      	b.n	8002a22 <HAL_RCC_OscConfig+0x376>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x33c>
 80029ce:	4b6a      	ldr	r3, [pc, #424]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	4a69      	ldr	r2, [pc, #420]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70
 80029da:	4b67      	ldr	r3, [pc, #412]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	4a66      	ldr	r2, [pc, #408]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 80029e0:	f023 0304 	bic.w	r3, r3, #4
 80029e4:	6713      	str	r3, [r2, #112]	; 0x70
 80029e6:	e01c      	b.n	8002a22 <HAL_RCC_OscConfig+0x376>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b05      	cmp	r3, #5
 80029ee:	d10c      	bne.n	8002a0a <HAL_RCC_OscConfig+0x35e>
 80029f0:	4b61      	ldr	r3, [pc, #388]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	4a60      	ldr	r2, [pc, #384]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 80029f6:	f043 0304 	orr.w	r3, r3, #4
 80029fa:	6713      	str	r3, [r2, #112]	; 0x70
 80029fc:	4b5e      	ldr	r3, [pc, #376]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a00:	4a5d      	ldr	r2, [pc, #372]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6713      	str	r3, [r2, #112]	; 0x70
 8002a08:	e00b      	b.n	8002a22 <HAL_RCC_OscConfig+0x376>
 8002a0a:	4b5b      	ldr	r3, [pc, #364]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	4a5a      	ldr	r2, [pc, #360]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002a10:	f023 0301 	bic.w	r3, r3, #1
 8002a14:	6713      	str	r3, [r2, #112]	; 0x70
 8002a16:	4b58      	ldr	r3, [pc, #352]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1a:	4a57      	ldr	r2, [pc, #348]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002a1c:	f023 0304 	bic.w	r3, r3, #4
 8002a20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d015      	beq.n	8002a56 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2a:	f7fe fe79 	bl	8001720 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a30:	e00a      	b.n	8002a48 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a32:	f7fe fe75 	bl	8001720 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e0ce      	b.n	8002be6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a48:	4b4b      	ldr	r3, [pc, #300]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ee      	beq.n	8002a32 <HAL_RCC_OscConfig+0x386>
 8002a54:	e014      	b.n	8002a80 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a56:	f7fe fe63 	bl	8001720 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7fe fe5f 	bl	8001720 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0b8      	b.n	8002be6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a74:	4b40      	ldr	r3, [pc, #256]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1ee      	bne.n	8002a5e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a80:	7dfb      	ldrb	r3, [r7, #23]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d105      	bne.n	8002a92 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a86:	4b3c      	ldr	r3, [pc, #240]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	4a3b      	ldr	r2, [pc, #236]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 80a4 	beq.w	8002be4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a9c:	4b36      	ldr	r3, [pc, #216]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 030c 	and.w	r3, r3, #12
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d06b      	beq.n	8002b80 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d149      	bne.n	8002b44 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab0:	4b31      	ldr	r3, [pc, #196]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a30      	ldr	r2, [pc, #192]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002ab6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7fe fe30 	bl	8001720 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fe fe2c 	bl	8001720 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e087      	b.n	8002be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad6:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69da      	ldr	r2, [r3, #28]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	019b      	lsls	r3, r3, #6
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	085b      	lsrs	r3, r3, #1
 8002afa:	3b01      	subs	r3, #1
 8002afc:	041b      	lsls	r3, r3, #16
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	061b      	lsls	r3, r3, #24
 8002b06:	4313      	orrs	r3, r2
 8002b08:	4a1b      	ldr	r2, [pc, #108]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002b0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b0e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a18      	ldr	r2, [pc, #96]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fe00 	bl	8001720 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe fdfc 	bl	8001720 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e057      	b.n	8002be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b36:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x478>
 8002b42:	e04f      	b.n	8002be4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0b      	ldr	r2, [pc, #44]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b50:	f7fe fde6 	bl	8001720 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b58:	f7fe fde2 	bl	8001720 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e03d      	b.n	8002be6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6a:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <HAL_RCC_OscConfig+0x4cc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x4ac>
 8002b76:	e035      	b.n	8002be4 <HAL_RCC_OscConfig+0x538>
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b80:	4b1b      	ldr	r3, [pc, #108]	; (8002bf0 <HAL_RCC_OscConfig+0x544>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d028      	beq.n	8002be0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d121      	bne.n	8002be0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d11a      	bne.n	8002be0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bb6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d111      	bne.n	8002be0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc6:	085b      	lsrs	r3, r3, #1
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d107      	bne.n	8002be0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bda:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d001      	beq.n	8002be4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023800 	.word	0x40023800

08002bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0d0      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c0c:	4b6a      	ldr	r3, [pc, #424]	; (8002db8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 030f 	and.w	r3, r3, #15
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d910      	bls.n	8002c3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1a:	4b67      	ldr	r3, [pc, #412]	; (8002db8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f023 020f 	bic.w	r2, r3, #15
 8002c22:	4965      	ldr	r1, [pc, #404]	; (8002db8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2a:	4b63      	ldr	r3, [pc, #396]	; (8002db8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0b8      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d020      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c54:	4b59      	ldr	r3, [pc, #356]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	4a58      	ldr	r2, [pc, #352]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002c5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c6c:	4b53      	ldr	r3, [pc, #332]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4a52      	ldr	r2, [pc, #328]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002c72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c78:	4b50      	ldr	r3, [pc, #320]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	494d      	ldr	r1, [pc, #308]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d040      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d107      	bne.n	8002cae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	4b47      	ldr	r3, [pc, #284]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d115      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e07f      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d107      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb6:	4b41      	ldr	r3, [pc, #260]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d109      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e073      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc6:	4b3d      	ldr	r3, [pc, #244]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e06b      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cd6:	4b39      	ldr	r3, [pc, #228]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f023 0203 	bic.w	r2, r3, #3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	4936      	ldr	r1, [pc, #216]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce8:	f7fe fd1a 	bl	8001720 <HAL_GetTick>
 8002cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cee:	e00a      	b.n	8002d06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf0:	f7fe fd16 	bl	8001720 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e053      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d06:	4b2d      	ldr	r3, [pc, #180]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 020c 	and.w	r2, r3, #12
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d1eb      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d18:	4b27      	ldr	r3, [pc, #156]	; (8002db8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d210      	bcs.n	8002d48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b24      	ldr	r3, [pc, #144]	; (8002db8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 020f 	bic.w	r2, r3, #15
 8002d2e:	4922      	ldr	r1, [pc, #136]	; (8002db8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e032      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d54:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4916      	ldr	r1, [pc, #88]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d009      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	490e      	ldr	r1, [pc, #56]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d86:	f000 f821 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCC_ClockConfig+0x1c8>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	490a      	ldr	r1, [pc, #40]	; (8002dc0 <HAL_RCC_ClockConfig+0x1cc>)
 8002d98:	5ccb      	ldrb	r3, [r1, r3]
 8002d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9e:	4a09      	ldr	r2, [pc, #36]	; (8002dc4 <HAL_RCC_ClockConfig+0x1d0>)
 8002da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_RCC_ClockConfig+0x1d4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fe fc76 	bl	8001698 <HAL_InitTick>

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40023c00 	.word	0x40023c00
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	0800a164 	.word	0x0800a164
 8002dc4:	20000000 	.word	0x20000000
 8002dc8:	20000004 	.word	0x20000004

08002dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd0:	b094      	sub	sp, #80	; 0x50
 8002dd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002dd8:	2300      	movs	r3, #0
 8002dda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ddc:	2300      	movs	r3, #0
 8002dde:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002de4:	4b79      	ldr	r3, [pc, #484]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d00d      	beq.n	8002e0c <HAL_RCC_GetSysClockFreq+0x40>
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	f200 80e1 	bhi.w	8002fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <HAL_RCC_GetSysClockFreq+0x34>
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d003      	beq.n	8002e06 <HAL_RCC_GetSysClockFreq+0x3a>
 8002dfe:	e0db      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e00:	4b73      	ldr	r3, [pc, #460]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e04:	e0db      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e06:	4b73      	ldr	r3, [pc, #460]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e0a:	e0d8      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e0c:	4b6f      	ldr	r3, [pc, #444]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e14:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e16:	4b6d      	ldr	r3, [pc, #436]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d063      	beq.n	8002eea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e22:	4b6a      	ldr	r3, [pc, #424]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	099b      	lsrs	r3, r3, #6
 8002e28:	2200      	movs	r2, #0
 8002e2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e34:	633b      	str	r3, [r7, #48]	; 0x30
 8002e36:	2300      	movs	r3, #0
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
 8002e3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e3e:	4622      	mov	r2, r4
 8002e40:	462b      	mov	r3, r5
 8002e42:	f04f 0000 	mov.w	r0, #0
 8002e46:	f04f 0100 	mov.w	r1, #0
 8002e4a:	0159      	lsls	r1, r3, #5
 8002e4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e50:	0150      	lsls	r0, r2, #5
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4621      	mov	r1, r4
 8002e58:	1a51      	subs	r1, r2, r1
 8002e5a:	6139      	str	r1, [r7, #16]
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e70:	4659      	mov	r1, fp
 8002e72:	018b      	lsls	r3, r1, #6
 8002e74:	4651      	mov	r1, sl
 8002e76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e7a:	4651      	mov	r1, sl
 8002e7c:	018a      	lsls	r2, r1, #6
 8002e7e:	4651      	mov	r1, sl
 8002e80:	ebb2 0801 	subs.w	r8, r2, r1
 8002e84:	4659      	mov	r1, fp
 8002e86:	eb63 0901 	sbc.w	r9, r3, r1
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e9e:	4690      	mov	r8, r2
 8002ea0:	4699      	mov	r9, r3
 8002ea2:	4623      	mov	r3, r4
 8002ea4:	eb18 0303 	adds.w	r3, r8, r3
 8002ea8:	60bb      	str	r3, [r7, #8]
 8002eaa:	462b      	mov	r3, r5
 8002eac:	eb49 0303 	adc.w	r3, r9, r3
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	024b      	lsls	r3, r1, #9
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ec8:	4621      	mov	r1, r4
 8002eca:	024a      	lsls	r2, r1, #9
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ed8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002edc:	f7fd f9a0 	bl	8000220 <__aeabi_uldivmod>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ee8:	e058      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eea:	4b38      	ldr	r3, [pc, #224]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	099b      	lsrs	r3, r3, #6
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002efa:	623b      	str	r3, [r7, #32]
 8002efc:	2300      	movs	r3, #0
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
 8002f00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f04:	4642      	mov	r2, r8
 8002f06:	464b      	mov	r3, r9
 8002f08:	f04f 0000 	mov.w	r0, #0
 8002f0c:	f04f 0100 	mov.w	r1, #0
 8002f10:	0159      	lsls	r1, r3, #5
 8002f12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f16:	0150      	lsls	r0, r2, #5
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4641      	mov	r1, r8
 8002f1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f22:	4649      	mov	r1, r9
 8002f24:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f3c:	ebb2 040a 	subs.w	r4, r2, sl
 8002f40:	eb63 050b 	sbc.w	r5, r3, fp
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	00eb      	lsls	r3, r5, #3
 8002f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f52:	00e2      	lsls	r2, r4, #3
 8002f54:	4614      	mov	r4, r2
 8002f56:	461d      	mov	r5, r3
 8002f58:	4643      	mov	r3, r8
 8002f5a:	18e3      	adds	r3, r4, r3
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	464b      	mov	r3, r9
 8002f60:	eb45 0303 	adc.w	r3, r5, r3
 8002f64:	607b      	str	r3, [r7, #4]
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f72:	4629      	mov	r1, r5
 8002f74:	028b      	lsls	r3, r1, #10
 8002f76:	4621      	mov	r1, r4
 8002f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	028a      	lsls	r2, r1, #10
 8002f80:	4610      	mov	r0, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f86:	2200      	movs	r2, #0
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	61fa      	str	r2, [r7, #28]
 8002f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f90:	f7fd f946 	bl	8000220 <__aeabi_uldivmod>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4613      	mov	r3, r2
 8002f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f9c:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	0c1b      	lsrs	r3, r3, #16
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002fac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fb6:	e002      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3750      	adds	r7, #80	; 0x50
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fca:	bf00      	nop
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	00f42400 	.word	0x00f42400
 8002fd4:	007a1200 	.word	0x007a1200

08002fd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fdc:	4b03      	ldr	r3, [pc, #12]	; (8002fec <HAL_RCC_GetHCLKFreq+0x14>)
 8002fde:	681b      	ldr	r3, [r3, #0]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	20000000 	.word	0x20000000

08002ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ff4:	f7ff fff0 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	0a9b      	lsrs	r3, r3, #10
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	4903      	ldr	r1, [pc, #12]	; (8003014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003006:	5ccb      	ldrb	r3, [r1, r3]
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40023800 	.word	0x40023800
 8003014:	0800a174 	.word	0x0800a174

08003018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800301c:	f7ff ffdc 	bl	8002fd8 <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	0b5b      	lsrs	r3, r3, #13
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4903      	ldr	r1, [pc, #12]	; (800303c <HAL_RCC_GetPCLK2Freq+0x24>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003034:	4618      	mov	r0, r3
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40023800 	.word	0x40023800
 800303c:	0800a174 	.word	0x0800a174

08003040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8003050:	2300      	movs	r3, #0
 8003052:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d012      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003064:	4b65      	ldr	r3, [pc, #404]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	4a64      	ldr	r2, [pc, #400]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800306a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800306e:	6093      	str	r3, [r2, #8]
 8003070:	4b62      	ldr	r3, [pc, #392]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	4960      	ldr	r1, [pc, #384]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8003086:	2301      	movs	r3, #1
 8003088:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d017      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003096:	4b59      	ldr	r3, [pc, #356]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800309c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a4:	4955      	ldr	r1, [pc, #340]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b4:	d101      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80030b6:	2301      	movs	r3, #1
 80030b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80030c2:	2301      	movs	r3, #1
 80030c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d017      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030d2:	4b4a      	ldr	r3, [pc, #296]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e0:	4946      	ldr	r1, [pc, #280]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f0:	d101      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80030f2:	2301      	movs	r3, #1
 80030f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80030fe:	2301      	movs	r3, #1
 8003100:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 808b 	beq.w	8003226 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003110:	4b3a      	ldr	r3, [pc, #232]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	4a39      	ldr	r2, [pc, #228]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311a:	6413      	str	r3, [r2, #64]	; 0x40
 800311c:	4b37      	ldr	r3, [pc, #220]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800311e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003128:	4b35      	ldr	r3, [pc, #212]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a34      	ldr	r2, [pc, #208]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800312e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003134:	f7fe faf4 	bl	8001720 <HAL_GetTick>
 8003138:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800313a:	e008      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313c:	f7fe faf0 	bl	8001720 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b64      	cmp	r3, #100	; 0x64
 8003148:	d901      	bls.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e2bc      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800314e:	4b2c      	ldr	r3, [pc, #176]	; (8003200 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800315a:	4b28      	ldr	r3, [pc, #160]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003162:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d035      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	429a      	cmp	r2, r3
 8003176:	d02e      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003178:	4b20      	ldr	r3, [pc, #128]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003180:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003182:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003186:	4a1d      	ldr	r2, [pc, #116]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800318c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800318e:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003192:	4a1a      	ldr	r2, [pc, #104]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003198:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800319a:	4a18      	ldr	r2, [pc, #96]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031a0:	4b16      	ldr	r3, [pc, #88]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d114      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ac:	f7fe fab8 	bl	8001720 <HAL_GetTick>
 80031b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b2:	e00a      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b4:	f7fe fab4 	bl	8001720 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d901      	bls.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e27e      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ca:	4b0c      	ldr	r3, [pc, #48]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0ee      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031e2:	d111      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80031f2:	400b      	ands	r3, r1
 80031f4:	4901      	ldr	r1, [pc, #4]	; (80031fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
 80031fa:	e00b      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80031fc:	40023800 	.word	0x40023800
 8003200:	40007000 	.word	0x40007000
 8003204:	0ffffcff 	.word	0x0ffffcff
 8003208:	4ba4      	ldr	r3, [pc, #656]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4aa3      	ldr	r2, [pc, #652]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800320e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003212:	6093      	str	r3, [r2, #8]
 8003214:	4ba1      	ldr	r3, [pc, #644]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003216:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003220:	499e      	ldr	r1, [pc, #632]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003222:	4313      	orrs	r3, r2
 8003224:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b00      	cmp	r3, #0
 8003230:	d010      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003232:	4b9a      	ldr	r3, [pc, #616]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003238:	4a98      	ldr	r2, [pc, #608]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800323a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800323e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003242:	4b96      	ldr	r3, [pc, #600]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003244:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324c:	4993      	ldr	r1, [pc, #588]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003260:	4b8e      	ldr	r3, [pc, #568]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003266:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	498b      	ldr	r1, [pc, #556]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003282:	4b86      	ldr	r3, [pc, #536]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003288:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003290:	4982      	ldr	r1, [pc, #520]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032a4:	4b7d      	ldr	r3, [pc, #500]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032b2:	497a      	ldr	r1, [pc, #488]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032c6:	4b75      	ldr	r3, [pc, #468]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032cc:	f023 0203 	bic.w	r2, r3, #3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d4:	4971      	ldr	r1, [pc, #452]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00a      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032e8:	4b6c      	ldr	r3, [pc, #432]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	f023 020c 	bic.w	r2, r3, #12
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	4969      	ldr	r1, [pc, #420]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800330a:	4b64      	ldr	r3, [pc, #400]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800330c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003310:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003318:	4960      	ldr	r1, [pc, #384]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800332c:	4b5b      	ldr	r3, [pc, #364]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003332:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800333a:	4958      	ldr	r1, [pc, #352]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00a      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800334e:	4b53      	ldr	r3, [pc, #332]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003354:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335c:	494f      	ldr	r1, [pc, #316]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800335e:	4313      	orrs	r3, r2
 8003360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003370:	4b4a      	ldr	r3, [pc, #296]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003376:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337e:	4947      	ldr	r1, [pc, #284]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003392:	4b42      	ldr	r3, [pc, #264]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003398:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a0:	493e      	ldr	r1, [pc, #248]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00a      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80033b4:	4b39      	ldr	r3, [pc, #228]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	4936      	ldr	r1, [pc, #216]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d011      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033d6:	4b31      	ldr	r3, [pc, #196]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e4:	492d      	ldr	r1, [pc, #180]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033f4:	d101      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80033f6:	2301      	movs	r3, #1
 80033f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003406:	4b25      	ldr	r3, [pc, #148]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003414:	4921      	ldr	r1, [pc, #132]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003428:	4b1c      	ldr	r3, [pc, #112]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003436:	4919      	ldr	r1, [pc, #100]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800344a:	4b14      	ldr	r3, [pc, #80]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003450:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003458:	4910      	ldr	r1, [pc, #64]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d006      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 809d 	beq.w	80035ae <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a08      	ldr	r2, [pc, #32]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800347a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800347e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003480:	f7fe f94e 	bl	8001720 <HAL_GetTick>
 8003484:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003486:	e00b      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003488:	f7fe f94a 	bl	8001720 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b64      	cmp	r3, #100	; 0x64
 8003494:	d904      	bls.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e116      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800349a:	bf00      	nop
 800349c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034a0:	4b8b      	ldr	r3, [pc, #556]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1ed      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d017      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d113      	bne.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034c0:	4b83      	ldr	r3, [pc, #524]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80034c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034c6:	0e1b      	lsrs	r3, r3, #24
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	019a      	lsls	r2, r3, #6
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	061b      	lsls	r3, r3, #24
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	071b      	lsls	r3, r3, #28
 80034e0:	497b      	ldr	r1, [pc, #492]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d004      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034fc:	d00a      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003506:	2b00      	cmp	r3, #0
 8003508:	d024      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003512:	d11f      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003514:	4b6e      	ldr	r3, [pc, #440]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800351a:	0f1b      	lsrs	r3, r3, #28
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	019a      	lsls	r2, r3, #6
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	061b      	lsls	r3, r3, #24
 800352e:	431a      	orrs	r2, r3
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	071b      	lsls	r3, r3, #28
 8003534:	4966      	ldr	r1, [pc, #408]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800353c:	4b64      	ldr	r3, [pc, #400]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800353e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003542:	f023 021f 	bic.w	r2, r3, #31
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	3b01      	subs	r3, #1
 800354c:	4960      	ldr	r1, [pc, #384]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00d      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	019a      	lsls	r2, r3, #6
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	061b      	lsls	r3, r3, #24
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	071b      	lsls	r3, r3, #28
 8003574:	4956      	ldr	r1, [pc, #344]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800357c:	4b54      	ldr	r3, [pc, #336]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a53      	ldr	r2, [pc, #332]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003582:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003588:	f7fe f8ca 	bl	8001720 <HAL_GetTick>
 800358c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003590:	f7fe f8c6 	bl	8001720 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	; 0x64
 800359c:	d901      	bls.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e092      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035a2:	4b4b      	ldr	r3, [pc, #300]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0f0      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	f040 8088 	bne.w	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80035b6:	4b46      	ldr	r3, [pc, #280]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a45      	ldr	r2, [pc, #276]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80035bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c2:	f7fe f8ad 	bl	8001720 <HAL_GetTick>
 80035c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035ca:	f7fe f8a9 	bl	8001720 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b64      	cmp	r3, #100	; 0x64
 80035d6:	d901      	bls.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e075      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035dc:	4b3c      	ldr	r3, [pc, #240]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035e8:	d0ef      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d009      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003606:	2b00      	cmp	r3, #0
 8003608:	d024      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	2b00      	cmp	r3, #0
 8003610:	d120      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003612:	4b2f      	ldr	r3, [pc, #188]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	019a      	lsls	r2, r3, #6
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	041b      	lsls	r3, r3, #16
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	061b      	lsls	r3, r3, #24
 8003632:	4927      	ldr	r1, [pc, #156]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800363a:	4b25      	ldr	r3, [pc, #148]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800363c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003640:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	3b01      	subs	r3, #1
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	4920      	ldr	r1, [pc, #128]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d018      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003664:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003668:	d113      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800366a:	4b19      	ldr	r3, [pc, #100]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003670:	0e1b      	lsrs	r3, r3, #24
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	019a      	lsls	r2, r3, #6
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	041b      	lsls	r3, r3, #16
 8003684:	431a      	orrs	r2, r3
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	061b      	lsls	r3, r3, #24
 800368a:	4911      	ldr	r1, [pc, #68]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003692:	4b0f      	ldr	r3, [pc, #60]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a0e      	ldr	r2, [pc, #56]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800369e:	f7fe f83f 	bl	8001720 <HAL_GetTick>
 80036a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036a6:	f7fe f83b 	bl	8001720 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b64      	cmp	r3, #100	; 0x64
 80036b2:	d901      	bls.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e007      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036c4:	d1ef      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3720      	adds	r7, #32
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40023800 	.word	0x40023800

080036d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e09d      	b.n	8003822 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d108      	bne.n	8003700 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036f6:	d009      	beq.n	800370c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	61da      	str	r2, [r3, #28]
 80036fe:	e005      	b.n	800370c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d106      	bne.n	800372c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fd fce0 	bl	80010ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003742:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800374c:	d902      	bls.n	8003754 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	e002      	b.n	800375a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003758:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003762:	d007      	beq.n	8003774 <HAL_SPI_Init+0xa0>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800376c:	d002      	beq.n	8003774 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69db      	ldr	r3, [r3, #28]
 80037a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b6:	ea42 0103 	orr.w	r1, r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	0c1b      	lsrs	r3, r3, #16
 80037d0:	f003 0204 	and.w	r2, r3, #4
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80037f0:	ea42 0103 	orr.w	r1, r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69da      	ldr	r2, [r3, #28]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003810:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b088      	sub	sp, #32
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	603b      	str	r3, [r7, #0]
 8003836:	4613      	mov	r3, r2
 8003838:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_SPI_Transmit+0x22>
 8003848:	2302      	movs	r3, #2
 800384a:	e158      	b.n	8003afe <HAL_SPI_Transmit+0x2d4>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003854:	f7fd ff64 	bl	8001720 <HAL_GetTick>
 8003858:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b01      	cmp	r3, #1
 8003868:	d002      	beq.n	8003870 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800386a:	2302      	movs	r3, #2
 800386c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800386e:	e13d      	b.n	8003aec <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <HAL_SPI_Transmit+0x52>
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d102      	bne.n	8003882 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003880:	e134      	b.n	8003aec <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2203      	movs	r2, #3
 8003886:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	88fa      	ldrh	r2, [r7, #6]
 800389a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	88fa      	ldrh	r2, [r7, #6]
 80038a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038cc:	d10f      	bne.n	80038ee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d007      	beq.n	800390c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800390a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003914:	d94b      	bls.n	80039ae <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_SPI_Transmit+0xfa>
 800391e:	8afb      	ldrh	r3, [r7, #22]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d13e      	bne.n	80039a2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	881a      	ldrh	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003934:	1c9a      	adds	r2, r3, #2
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003948:	e02b      	b.n	80039a2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b02      	cmp	r3, #2
 8003956:	d112      	bne.n	800397e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	881a      	ldrh	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003968:	1c9a      	adds	r2, r3, #2
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003972:	b29b      	uxth	r3, r3
 8003974:	3b01      	subs	r3, #1
 8003976:	b29a      	uxth	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800397c:	e011      	b.n	80039a2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800397e:	f7fd fecf 	bl	8001720 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d803      	bhi.n	8003996 <HAL_SPI_Transmit+0x16c>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003994:	d102      	bne.n	800399c <HAL_SPI_Transmit+0x172>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d102      	bne.n	80039a2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039a0:	e0a4      	b.n	8003aec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1ce      	bne.n	800394a <HAL_SPI_Transmit+0x120>
 80039ac:	e07c      	b.n	8003aa8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <HAL_SPI_Transmit+0x192>
 80039b6:	8afb      	ldrh	r3, [r7, #22]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d170      	bne.n	8003a9e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d912      	bls.n	80039ec <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ca:	881a      	ldrh	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d6:	1c9a      	adds	r2, r3, #2
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b02      	subs	r3, #2
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039ea:	e058      	b.n	8003a9e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	330c      	adds	r3, #12
 80039f6:	7812      	ldrb	r2, [r2, #0]
 80039f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003a12:	e044      	b.n	8003a9e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d12b      	bne.n	8003a7a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d912      	bls.n	8003a52 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	881a      	ldrh	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	1c9a      	adds	r2, r3, #2
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b02      	subs	r3, #2
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a50:	e025      	b.n	8003a9e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	7812      	ldrb	r2, [r2, #0]
 8003a5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a78:	e011      	b.n	8003a9e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a7a:	f7fd fe51 	bl	8001720 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d803      	bhi.n	8003a92 <HAL_SPI_Transmit+0x268>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a90:	d102      	bne.n	8003a98 <HAL_SPI_Transmit+0x26e>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a9c:	e026      	b.n	8003aec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1b5      	bne.n	8003a14 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	6839      	ldr	r1, [r7, #0]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 fa69 	bl	8003f84 <SPI_EndRxTxTransaction>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10a      	bne.n	8003adc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	613b      	str	r3, [r7, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	e000      	b.n	8003aec <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003aea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003afc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3720      	adds	r7, #32
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	099b      	lsrs	r3, r3, #6
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10f      	bne.n	8003b4c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00a      	beq.n	8003b4c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	099b      	lsrs	r3, r3, #6
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d004      	beq.n	8003b4c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	4798      	blx	r3
    return;
 8003b4a:	e0d7      	b.n	8003cfc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	085b      	lsrs	r3, r3, #1
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <HAL_SPI_IRQHandler+0x66>
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	09db      	lsrs	r3, r3, #7
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d004      	beq.n	8003b6e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	4798      	blx	r3
    return;
 8003b6c:	e0c6      	b.n	8003cfc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10c      	bne.n	8003b94 <HAL_SPI_IRQHandler+0x8c>
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	099b      	lsrs	r3, r3, #6
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	0a1b      	lsrs	r3, r3, #8
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 80b4 	beq.w	8003cfc <HAL_SPI_IRQHandler+0x1f4>
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80ad 	beq.w	8003cfc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	099b      	lsrs	r3, r3, #6
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d023      	beq.n	8003bf6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d011      	beq.n	8003bde <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bbe:	f043 0204 	orr.w	r2, r3, #4
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	e00b      	b.n	8003bf6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	693b      	ldr	r3, [r7, #16]
        return;
 8003bf4:	e082      	b.n	8003cfc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d014      	beq.n	8003c2c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c06:	f043 0201 	orr.w	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	0a1b      	lsrs	r3, r3, #8
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00c      	beq.n	8003c52 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c3c:	f043 0208 	orr.w	r2, r3, #8
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003c44:	2300      	movs	r3, #0
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	60bb      	str	r3, [r7, #8]
 8003c50:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d04f      	beq.n	8003cfa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c68:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d104      	bne.n	8003c86 <HAL_SPI_IRQHandler+0x17e>
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d034      	beq.n	8003cf0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0203 	bic.w	r2, r2, #3
 8003c94:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d011      	beq.n	8003cc2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca2:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <HAL_SPI_IRQHandler+0x1fc>)
 8003ca4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fd ff28 	bl	8001b00 <HAL_DMA_Abort_IT>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d016      	beq.n	8003cf8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cce:	4a0d      	ldr	r2, [pc, #52]	; (8003d04 <HAL_SPI_IRQHandler+0x1fc>)
 8003cd0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fd ff12 	bl	8001b00 <HAL_DMA_Abort_IT>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003cee:	e003      	b.n	8003cf8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f809 	bl	8003d08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003cf6:	e000      	b.n	8003cfa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003cf8:	bf00      	nop
    return;
 8003cfa:	bf00      	nop
  }
}
 8003cfc:	3720      	adds	r7, #32
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	08003d1d 	.word	0x08003d1d

08003d08 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f7ff ffe5 	bl	8003d08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d58:	f7fd fce2 	bl	8001720 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	4413      	add	r3, r2
 8003d66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d68:	f7fd fcda 	bl	8001720 <HAL_GetTick>
 8003d6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d6e:	4b39      	ldr	r3, [pc, #228]	; (8003e54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	015b      	lsls	r3, r3, #5
 8003d74:	0d1b      	lsrs	r3, r3, #20
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	fb02 f303 	mul.w	r3, r2, r3
 8003d7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d7e:	e054      	b.n	8003e2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d86:	d050      	beq.n	8003e2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d88:	f7fd fcca 	bl	8001720 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d902      	bls.n	8003d9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d13d      	bne.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db6:	d111      	bne.n	8003ddc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc0:	d004      	beq.n	8003dcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dca:	d107      	bne.n	8003ddc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de4:	d10f      	bne.n	8003e06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e017      	b.n	8003e4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4013      	ands	r3, r2
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	bf0c      	ite	eq
 8003e3a:	2301      	moveq	r3, #1
 8003e3c:	2300      	movne	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d19b      	bne.n	8003d80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000000 	.word	0x20000000

08003e58 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08a      	sub	sp, #40	; 0x28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e66:	2300      	movs	r3, #0
 8003e68:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e6a:	f7fd fc59 	bl	8001720 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	4413      	add	r3, r2
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003e7a:	f7fd fc51 	bl	8001720 <HAL_GetTick>
 8003e7e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e88:	4b3d      	ldr	r3, [pc, #244]	; (8003f80 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	00da      	lsls	r2, r3, #3
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	0d1b      	lsrs	r3, r3, #20
 8003e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9a:	fb02 f303 	mul.w	r3, r2, r3
 8003e9e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ea0:	e060      	b.n	8003f64 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ea8:	d107      	bne.n	8003eba <SPI_WaitFifoStateUntilTimeout+0x62>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d104      	bne.n	8003eba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003eb8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec0:	d050      	beq.n	8003f64 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ec2:	f7fd fc2d 	bl	8001720 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d902      	bls.n	8003ed8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d13d      	bne.n	8003f54 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ee6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ef0:	d111      	bne.n	8003f16 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003efa:	d004      	beq.n	8003f06 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f04:	d107      	bne.n	8003f16 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f1e:	d10f      	bne.n	8003f40 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e010      	b.n	8003f76 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d196      	bne.n	8003ea2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3728      	adds	r7, #40	; 0x28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000000 	.word	0x20000000

08003f84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af02      	add	r7, sp, #8
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f7ff ff5b 	bl	8003e58 <SPI_WaitFifoStateUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fac:	f043 0220 	orr.w	r2, r3, #32
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e046      	b.n	8004046 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003fb8:	4b25      	ldr	r3, [pc, #148]	; (8004050 <SPI_EndRxTxTransaction+0xcc>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a25      	ldr	r2, [pc, #148]	; (8004054 <SPI_EndRxTxTransaction+0xd0>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	0d5b      	lsrs	r3, r3, #21
 8003fc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fc8:	fb02 f303 	mul.w	r3, r2, r3
 8003fcc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fd6:	d112      	bne.n	8003ffe <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	2180      	movs	r1, #128	; 0x80
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f7ff feb0 	bl	8003d48 <SPI_WaitFlagStateUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d016      	beq.n	800401c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff2:	f043 0220 	orr.w	r2, r3, #32
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e023      	b.n	8004046 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	3b01      	subs	r3, #1
 8004008:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004014:	2b80      	cmp	r3, #128	; 0x80
 8004016:	d0f2      	beq.n	8003ffe <SPI_EndRxTxTransaction+0x7a>
 8004018:	e000      	b.n	800401c <SPI_EndRxTxTransaction+0x98>
        break;
 800401a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2200      	movs	r2, #0
 8004024:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f7ff ff15 	bl	8003e58 <SPI_WaitFifoStateUntilTimeout>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004038:	f043 0220 	orr.w	r2, r3, #32
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e000      	b.n	8004046 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000000 	.word	0x20000000
 8004054:	165e9f81 	.word	0x165e9f81

08004058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e049      	b.n	80040fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fd f97c 	bl	800137c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f000 fac0 	bl	800461c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d001      	beq.n	8004120 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e054      	b.n	80041ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0201 	orr.w	r2, r2, #1
 8004136:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a26      	ldr	r2, [pc, #152]	; (80041d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d022      	beq.n	8004188 <HAL_TIM_Base_Start_IT+0x80>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414a:	d01d      	beq.n	8004188 <HAL_TIM_Base_Start_IT+0x80>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a22      	ldr	r2, [pc, #136]	; (80041dc <HAL_TIM_Base_Start_IT+0xd4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d018      	beq.n	8004188 <HAL_TIM_Base_Start_IT+0x80>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a21      	ldr	r2, [pc, #132]	; (80041e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d013      	beq.n	8004188 <HAL_TIM_Base_Start_IT+0x80>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a1f      	ldr	r2, [pc, #124]	; (80041e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00e      	beq.n	8004188 <HAL_TIM_Base_Start_IT+0x80>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a1e      	ldr	r2, [pc, #120]	; (80041e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d009      	beq.n	8004188 <HAL_TIM_Base_Start_IT+0x80>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a1c      	ldr	r2, [pc, #112]	; (80041ec <HAL_TIM_Base_Start_IT+0xe4>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d004      	beq.n	8004188 <HAL_TIM_Base_Start_IT+0x80>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1b      	ldr	r2, [pc, #108]	; (80041f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d115      	bne.n	80041b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	4b19      	ldr	r3, [pc, #100]	; (80041f4 <HAL_TIM_Base_Start_IT+0xec>)
 8004190:	4013      	ands	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b06      	cmp	r3, #6
 8004198:	d015      	beq.n	80041c6 <HAL_TIM_Base_Start_IT+0xbe>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a0:	d011      	beq.n	80041c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0201 	orr.w	r2, r2, #1
 80041b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b2:	e008      	b.n	80041c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	e000      	b.n	80041c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40010000 	.word	0x40010000
 80041dc:	40000400 	.word	0x40000400
 80041e0:	40000800 	.word	0x40000800
 80041e4:	40000c00 	.word	0x40000c00
 80041e8:	40010400 	.word	0x40010400
 80041ec:	40014000 	.word	0x40014000
 80041f0:	40001800 	.word	0x40001800
 80041f4:	00010007 	.word	0x00010007

080041f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b02      	cmp	r3, #2
 800420c:	d122      	bne.n	8004254 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b02      	cmp	r3, #2
 800421a:	d11b      	bne.n	8004254 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0202 	mvn.w	r2, #2
 8004224:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f9d0 	bl	80045e0 <HAL_TIM_IC_CaptureCallback>
 8004240:	e005      	b.n	800424e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f9c2 	bl	80045cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f9d3 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b04      	cmp	r3, #4
 8004260:	d122      	bne.n	80042a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b04      	cmp	r3, #4
 800426e:	d11b      	bne.n	80042a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0204 	mvn.w	r2, #4
 8004278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f9a6 	bl	80045e0 <HAL_TIM_IC_CaptureCallback>
 8004294:	e005      	b.n	80042a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f998 	bl	80045cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f9a9 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d122      	bne.n	80042fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f003 0308 	and.w	r3, r3, #8
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d11b      	bne.n	80042fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f06f 0208 	mvn.w	r2, #8
 80042cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2204      	movs	r2, #4
 80042d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f97c 	bl	80045e0 <HAL_TIM_IC_CaptureCallback>
 80042e8:	e005      	b.n	80042f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f96e 	bl	80045cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f97f 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0310 	and.w	r3, r3, #16
 8004306:	2b10      	cmp	r3, #16
 8004308:	d122      	bne.n	8004350 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b10      	cmp	r3, #16
 8004316:	d11b      	bne.n	8004350 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0210 	mvn.w	r2, #16
 8004320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2208      	movs	r2, #8
 8004326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f952 	bl	80045e0 <HAL_TIM_IC_CaptureCallback>
 800433c:	e005      	b.n	800434a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f944 	bl	80045cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f955 	bl	80045f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b01      	cmp	r3, #1
 800435c:	d10e      	bne.n	800437c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b01      	cmp	r3, #1
 800436a:	d107      	bne.n	800437c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0201 	mvn.w	r2, #1
 8004374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fc fe56 	bl	8001028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004386:	2b80      	cmp	r3, #128	; 0x80
 8004388:	d10e      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004394:	2b80      	cmp	r3, #128	; 0x80
 8004396:	d107      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fb0c 	bl	80049c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043b6:	d10e      	bne.n	80043d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c2:	2b80      	cmp	r3, #128	; 0x80
 80043c4:	d107      	bne.n	80043d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 faff 	bl	80049d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e0:	2b40      	cmp	r3, #64	; 0x40
 80043e2:	d10e      	bne.n	8004402 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	d107      	bne.n	8004402 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f903 	bl	8004608 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b20      	cmp	r3, #32
 800440e:	d10e      	bne.n	800442e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b20      	cmp	r3, #32
 800441c:	d107      	bne.n	800442e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f06f 0220 	mvn.w	r2, #32
 8004426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 fabf 	bl	80049ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_TIM_ConfigClockSource+0x1c>
 8004450:	2302      	movs	r3, #2
 8004452:	e0b4      	b.n	80045be <HAL_TIM_ConfigClockSource+0x186>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	4b56      	ldr	r3, [pc, #344]	; (80045c8 <HAL_TIM_ConfigClockSource+0x190>)
 8004470:	4013      	ands	r3, r2
 8004472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800447a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800448c:	d03e      	beq.n	800450c <HAL_TIM_ConfigClockSource+0xd4>
 800448e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004492:	f200 8087 	bhi.w	80045a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449a:	f000 8086 	beq.w	80045aa <HAL_TIM_ConfigClockSource+0x172>
 800449e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a2:	d87f      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x16c>
 80044a4:	2b70      	cmp	r3, #112	; 0x70
 80044a6:	d01a      	beq.n	80044de <HAL_TIM_ConfigClockSource+0xa6>
 80044a8:	2b70      	cmp	r3, #112	; 0x70
 80044aa:	d87b      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x16c>
 80044ac:	2b60      	cmp	r3, #96	; 0x60
 80044ae:	d050      	beq.n	8004552 <HAL_TIM_ConfigClockSource+0x11a>
 80044b0:	2b60      	cmp	r3, #96	; 0x60
 80044b2:	d877      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x16c>
 80044b4:	2b50      	cmp	r3, #80	; 0x50
 80044b6:	d03c      	beq.n	8004532 <HAL_TIM_ConfigClockSource+0xfa>
 80044b8:	2b50      	cmp	r3, #80	; 0x50
 80044ba:	d873      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x16c>
 80044bc:	2b40      	cmp	r3, #64	; 0x40
 80044be:	d058      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x13a>
 80044c0:	2b40      	cmp	r3, #64	; 0x40
 80044c2:	d86f      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x16c>
 80044c4:	2b30      	cmp	r3, #48	; 0x30
 80044c6:	d064      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0x15a>
 80044c8:	2b30      	cmp	r3, #48	; 0x30
 80044ca:	d86b      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x16c>
 80044cc:	2b20      	cmp	r3, #32
 80044ce:	d060      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0x15a>
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d867      	bhi.n	80045a4 <HAL_TIM_ConfigClockSource+0x16c>
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d05c      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0x15a>
 80044d8:	2b10      	cmp	r3, #16
 80044da:	d05a      	beq.n	8004592 <HAL_TIM_ConfigClockSource+0x15a>
 80044dc:	e062      	b.n	80045a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6899      	ldr	r1, [r3, #8]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f000 f9af 	bl	8004850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004500:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	609a      	str	r2, [r3, #8]
      break;
 800450a:	e04f      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	6899      	ldr	r1, [r3, #8]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f000 f998 	bl	8004850 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800452e:	609a      	str	r2, [r3, #8]
      break;
 8004530:	e03c      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	6859      	ldr	r1, [r3, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	461a      	mov	r2, r3
 8004540:	f000 f90c 	bl	800475c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2150      	movs	r1, #80	; 0x50
 800454a:	4618      	mov	r0, r3
 800454c:	f000 f965 	bl	800481a <TIM_ITRx_SetConfig>
      break;
 8004550:	e02c      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6859      	ldr	r1, [r3, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	461a      	mov	r2, r3
 8004560:	f000 f92b 	bl	80047ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2160      	movs	r1, #96	; 0x60
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f955 	bl	800481a <TIM_ITRx_SetConfig>
      break;
 8004570:	e01c      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6859      	ldr	r1, [r3, #4]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	461a      	mov	r2, r3
 8004580:	f000 f8ec 	bl	800475c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2140      	movs	r1, #64	; 0x40
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f945 	bl	800481a <TIM_ITRx_SetConfig>
      break;
 8004590:	e00c      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4619      	mov	r1, r3
 800459c:	4610      	mov	r0, r2
 800459e:	f000 f93c 	bl	800481a <TIM_ITRx_SetConfig>
      break;
 80045a2:	e003      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	73fb      	strb	r3, [r7, #15]
      break;
 80045a8:	e000      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	fffeff88 	.word	0xfffeff88

080045cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a40      	ldr	r2, [pc, #256]	; (8004730 <TIM_Base_SetConfig+0x114>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d013      	beq.n	800465c <TIM_Base_SetConfig+0x40>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800463a:	d00f      	beq.n	800465c <TIM_Base_SetConfig+0x40>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a3d      	ldr	r2, [pc, #244]	; (8004734 <TIM_Base_SetConfig+0x118>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00b      	beq.n	800465c <TIM_Base_SetConfig+0x40>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a3c      	ldr	r2, [pc, #240]	; (8004738 <TIM_Base_SetConfig+0x11c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d007      	beq.n	800465c <TIM_Base_SetConfig+0x40>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a3b      	ldr	r2, [pc, #236]	; (800473c <TIM_Base_SetConfig+0x120>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d003      	beq.n	800465c <TIM_Base_SetConfig+0x40>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a3a      	ldr	r2, [pc, #232]	; (8004740 <TIM_Base_SetConfig+0x124>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d108      	bne.n	800466e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a2f      	ldr	r2, [pc, #188]	; (8004730 <TIM_Base_SetConfig+0x114>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d02b      	beq.n	80046ce <TIM_Base_SetConfig+0xb2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467c:	d027      	beq.n	80046ce <TIM_Base_SetConfig+0xb2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a2c      	ldr	r2, [pc, #176]	; (8004734 <TIM_Base_SetConfig+0x118>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d023      	beq.n	80046ce <TIM_Base_SetConfig+0xb2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a2b      	ldr	r2, [pc, #172]	; (8004738 <TIM_Base_SetConfig+0x11c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d01f      	beq.n	80046ce <TIM_Base_SetConfig+0xb2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a2a      	ldr	r2, [pc, #168]	; (800473c <TIM_Base_SetConfig+0x120>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d01b      	beq.n	80046ce <TIM_Base_SetConfig+0xb2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a29      	ldr	r2, [pc, #164]	; (8004740 <TIM_Base_SetConfig+0x124>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d017      	beq.n	80046ce <TIM_Base_SetConfig+0xb2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a28      	ldr	r2, [pc, #160]	; (8004744 <TIM_Base_SetConfig+0x128>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d013      	beq.n	80046ce <TIM_Base_SetConfig+0xb2>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a27      	ldr	r2, [pc, #156]	; (8004748 <TIM_Base_SetConfig+0x12c>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00f      	beq.n	80046ce <TIM_Base_SetConfig+0xb2>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a26      	ldr	r2, [pc, #152]	; (800474c <TIM_Base_SetConfig+0x130>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00b      	beq.n	80046ce <TIM_Base_SetConfig+0xb2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a25      	ldr	r2, [pc, #148]	; (8004750 <TIM_Base_SetConfig+0x134>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d007      	beq.n	80046ce <TIM_Base_SetConfig+0xb2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a24      	ldr	r2, [pc, #144]	; (8004754 <TIM_Base_SetConfig+0x138>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d003      	beq.n	80046ce <TIM_Base_SetConfig+0xb2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a23      	ldr	r2, [pc, #140]	; (8004758 <TIM_Base_SetConfig+0x13c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d108      	bne.n	80046e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a0a      	ldr	r2, [pc, #40]	; (8004730 <TIM_Base_SetConfig+0x114>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d003      	beq.n	8004714 <TIM_Base_SetConfig+0xf8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a0c      	ldr	r2, [pc, #48]	; (8004740 <TIM_Base_SetConfig+0x124>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d103      	bne.n	800471c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	615a      	str	r2, [r3, #20]
}
 8004722:	bf00      	nop
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40010000 	.word	0x40010000
 8004734:	40000400 	.word	0x40000400
 8004738:	40000800 	.word	0x40000800
 800473c:	40000c00 	.word	0x40000c00
 8004740:	40010400 	.word	0x40010400
 8004744:	40014000 	.word	0x40014000
 8004748:	40014400 	.word	0x40014400
 800474c:	40014800 	.word	0x40014800
 8004750:	40001800 	.word	0x40001800
 8004754:	40001c00 	.word	0x40001c00
 8004758:	40002000 	.word	0x40002000

0800475c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800475c:	b480      	push	{r7}
 800475e:	b087      	sub	sp, #28
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	f023 0201 	bic.w	r2, r3, #1
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4313      	orrs	r3, r2
 8004790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f023 030a 	bic.w	r3, r3, #10
 8004798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	621a      	str	r2, [r3, #32]
}
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b087      	sub	sp, #28
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f023 0210 	bic.w	r2, r3, #16
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	031b      	lsls	r3, r3, #12
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	621a      	str	r2, [r3, #32]
}
 800480e:	bf00      	nop
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800481a:	b480      	push	{r7}
 800481c:	b085      	sub	sp, #20
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	f043 0307 	orr.w	r3, r3, #7
 800483c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	609a      	str	r2, [r3, #8]
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800486a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	021a      	lsls	r2, r3, #8
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	431a      	orrs	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4313      	orrs	r3, r2
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	609a      	str	r2, [r3, #8]
}
 8004884:	bf00      	nop
 8004886:	371c      	adds	r7, #28
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d101      	bne.n	80048a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048a4:	2302      	movs	r3, #2
 80048a6:	e06d      	b.n	8004984 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a30      	ldr	r2, [pc, #192]	; (8004990 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d004      	beq.n	80048dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a2f      	ldr	r2, [pc, #188]	; (8004994 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d108      	bne.n	80048ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a20      	ldr	r2, [pc, #128]	; (8004990 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d022      	beq.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491a:	d01d      	beq.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a1d      	ldr	r2, [pc, #116]	; (8004998 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d018      	beq.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a1c      	ldr	r2, [pc, #112]	; (800499c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d013      	beq.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a1a      	ldr	r2, [pc, #104]	; (80049a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00e      	beq.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a15      	ldr	r2, [pc, #84]	; (8004994 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d009      	beq.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a16      	ldr	r2, [pc, #88]	; (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d004      	beq.n	8004958 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a15      	ldr	r2, [pc, #84]	; (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d10c      	bne.n	8004972 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800495e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	4313      	orrs	r3, r2
 8004968:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	40010000 	.word	0x40010000
 8004994:	40010400 	.word	0x40010400
 8004998:	40000400 	.word	0x40000400
 800499c:	40000800 	.word	0x40000800
 80049a0:	40000c00 	.word	0x40000c00
 80049a4:	40014000 	.word	0x40014000
 80049a8:	40001800 	.word	0x40001800

080049ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e040      	b.n	8004a7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f7fc fd06 	bl	800141c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2224      	movs	r2, #36	; 0x24
 8004a14:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0201 	bic.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f82c 	bl	8004a84 <UART_SetConfig>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e022      	b.n	8004a7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fa84 	bl	8004f4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685a      	ldr	r2, [r3, #4]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0201 	orr.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fb0b 	bl	8005090 <UART_CheckIdleState>
 8004a7a:	4603      	mov	r3, r0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4ba6      	ldr	r3, [pc, #664]	; (8004d48 <UART_SetConfig+0x2c4>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	6979      	ldr	r1, [r7, #20]
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a94      	ldr	r2, [pc, #592]	; (8004d4c <UART_SetConfig+0x2c8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d120      	bne.n	8004b42 <UART_SetConfig+0xbe>
 8004b00:	4b93      	ldr	r3, [pc, #588]	; (8004d50 <UART_SetConfig+0x2cc>)
 8004b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d816      	bhi.n	8004b3c <UART_SetConfig+0xb8>
 8004b0e:	a201      	add	r2, pc, #4	; (adr r2, 8004b14 <UART_SetConfig+0x90>)
 8004b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b14:	08004b25 	.word	0x08004b25
 8004b18:	08004b31 	.word	0x08004b31
 8004b1c:	08004b2b 	.word	0x08004b2b
 8004b20:	08004b37 	.word	0x08004b37
 8004b24:	2301      	movs	r3, #1
 8004b26:	77fb      	strb	r3, [r7, #31]
 8004b28:	e150      	b.n	8004dcc <UART_SetConfig+0x348>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	77fb      	strb	r3, [r7, #31]
 8004b2e:	e14d      	b.n	8004dcc <UART_SetConfig+0x348>
 8004b30:	2304      	movs	r3, #4
 8004b32:	77fb      	strb	r3, [r7, #31]
 8004b34:	e14a      	b.n	8004dcc <UART_SetConfig+0x348>
 8004b36:	2308      	movs	r3, #8
 8004b38:	77fb      	strb	r3, [r7, #31]
 8004b3a:	e147      	b.n	8004dcc <UART_SetConfig+0x348>
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	77fb      	strb	r3, [r7, #31]
 8004b40:	e144      	b.n	8004dcc <UART_SetConfig+0x348>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a83      	ldr	r2, [pc, #524]	; (8004d54 <UART_SetConfig+0x2d0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d132      	bne.n	8004bb2 <UART_SetConfig+0x12e>
 8004b4c:	4b80      	ldr	r3, [pc, #512]	; (8004d50 <UART_SetConfig+0x2cc>)
 8004b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b52:	f003 030c 	and.w	r3, r3, #12
 8004b56:	2b0c      	cmp	r3, #12
 8004b58:	d828      	bhi.n	8004bac <UART_SetConfig+0x128>
 8004b5a:	a201      	add	r2, pc, #4	; (adr r2, 8004b60 <UART_SetConfig+0xdc>)
 8004b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b60:	08004b95 	.word	0x08004b95
 8004b64:	08004bad 	.word	0x08004bad
 8004b68:	08004bad 	.word	0x08004bad
 8004b6c:	08004bad 	.word	0x08004bad
 8004b70:	08004ba1 	.word	0x08004ba1
 8004b74:	08004bad 	.word	0x08004bad
 8004b78:	08004bad 	.word	0x08004bad
 8004b7c:	08004bad 	.word	0x08004bad
 8004b80:	08004b9b 	.word	0x08004b9b
 8004b84:	08004bad 	.word	0x08004bad
 8004b88:	08004bad 	.word	0x08004bad
 8004b8c:	08004bad 	.word	0x08004bad
 8004b90:	08004ba7 	.word	0x08004ba7
 8004b94:	2300      	movs	r3, #0
 8004b96:	77fb      	strb	r3, [r7, #31]
 8004b98:	e118      	b.n	8004dcc <UART_SetConfig+0x348>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	77fb      	strb	r3, [r7, #31]
 8004b9e:	e115      	b.n	8004dcc <UART_SetConfig+0x348>
 8004ba0:	2304      	movs	r3, #4
 8004ba2:	77fb      	strb	r3, [r7, #31]
 8004ba4:	e112      	b.n	8004dcc <UART_SetConfig+0x348>
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	77fb      	strb	r3, [r7, #31]
 8004baa:	e10f      	b.n	8004dcc <UART_SetConfig+0x348>
 8004bac:	2310      	movs	r3, #16
 8004bae:	77fb      	strb	r3, [r7, #31]
 8004bb0:	e10c      	b.n	8004dcc <UART_SetConfig+0x348>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a68      	ldr	r2, [pc, #416]	; (8004d58 <UART_SetConfig+0x2d4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d120      	bne.n	8004bfe <UART_SetConfig+0x17a>
 8004bbc:	4b64      	ldr	r3, [pc, #400]	; (8004d50 <UART_SetConfig+0x2cc>)
 8004bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bc6:	2b30      	cmp	r3, #48	; 0x30
 8004bc8:	d013      	beq.n	8004bf2 <UART_SetConfig+0x16e>
 8004bca:	2b30      	cmp	r3, #48	; 0x30
 8004bcc:	d814      	bhi.n	8004bf8 <UART_SetConfig+0x174>
 8004bce:	2b20      	cmp	r3, #32
 8004bd0:	d009      	beq.n	8004be6 <UART_SetConfig+0x162>
 8004bd2:	2b20      	cmp	r3, #32
 8004bd4:	d810      	bhi.n	8004bf8 <UART_SetConfig+0x174>
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <UART_SetConfig+0x15c>
 8004bda:	2b10      	cmp	r3, #16
 8004bdc:	d006      	beq.n	8004bec <UART_SetConfig+0x168>
 8004bde:	e00b      	b.n	8004bf8 <UART_SetConfig+0x174>
 8004be0:	2300      	movs	r3, #0
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e0f2      	b.n	8004dcc <UART_SetConfig+0x348>
 8004be6:	2302      	movs	r3, #2
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	e0ef      	b.n	8004dcc <UART_SetConfig+0x348>
 8004bec:	2304      	movs	r3, #4
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e0ec      	b.n	8004dcc <UART_SetConfig+0x348>
 8004bf2:	2308      	movs	r3, #8
 8004bf4:	77fb      	strb	r3, [r7, #31]
 8004bf6:	e0e9      	b.n	8004dcc <UART_SetConfig+0x348>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e0e6      	b.n	8004dcc <UART_SetConfig+0x348>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a56      	ldr	r2, [pc, #344]	; (8004d5c <UART_SetConfig+0x2d8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d120      	bne.n	8004c4a <UART_SetConfig+0x1c6>
 8004c08:	4b51      	ldr	r3, [pc, #324]	; (8004d50 <UART_SetConfig+0x2cc>)
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c12:	2bc0      	cmp	r3, #192	; 0xc0
 8004c14:	d013      	beq.n	8004c3e <UART_SetConfig+0x1ba>
 8004c16:	2bc0      	cmp	r3, #192	; 0xc0
 8004c18:	d814      	bhi.n	8004c44 <UART_SetConfig+0x1c0>
 8004c1a:	2b80      	cmp	r3, #128	; 0x80
 8004c1c:	d009      	beq.n	8004c32 <UART_SetConfig+0x1ae>
 8004c1e:	2b80      	cmp	r3, #128	; 0x80
 8004c20:	d810      	bhi.n	8004c44 <UART_SetConfig+0x1c0>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <UART_SetConfig+0x1a8>
 8004c26:	2b40      	cmp	r3, #64	; 0x40
 8004c28:	d006      	beq.n	8004c38 <UART_SetConfig+0x1b4>
 8004c2a:	e00b      	b.n	8004c44 <UART_SetConfig+0x1c0>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	77fb      	strb	r3, [r7, #31]
 8004c30:	e0cc      	b.n	8004dcc <UART_SetConfig+0x348>
 8004c32:	2302      	movs	r3, #2
 8004c34:	77fb      	strb	r3, [r7, #31]
 8004c36:	e0c9      	b.n	8004dcc <UART_SetConfig+0x348>
 8004c38:	2304      	movs	r3, #4
 8004c3a:	77fb      	strb	r3, [r7, #31]
 8004c3c:	e0c6      	b.n	8004dcc <UART_SetConfig+0x348>
 8004c3e:	2308      	movs	r3, #8
 8004c40:	77fb      	strb	r3, [r7, #31]
 8004c42:	e0c3      	b.n	8004dcc <UART_SetConfig+0x348>
 8004c44:	2310      	movs	r3, #16
 8004c46:	77fb      	strb	r3, [r7, #31]
 8004c48:	e0c0      	b.n	8004dcc <UART_SetConfig+0x348>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a44      	ldr	r2, [pc, #272]	; (8004d60 <UART_SetConfig+0x2dc>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d125      	bne.n	8004ca0 <UART_SetConfig+0x21c>
 8004c54:	4b3e      	ldr	r3, [pc, #248]	; (8004d50 <UART_SetConfig+0x2cc>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c62:	d017      	beq.n	8004c94 <UART_SetConfig+0x210>
 8004c64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c68:	d817      	bhi.n	8004c9a <UART_SetConfig+0x216>
 8004c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c6e:	d00b      	beq.n	8004c88 <UART_SetConfig+0x204>
 8004c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c74:	d811      	bhi.n	8004c9a <UART_SetConfig+0x216>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <UART_SetConfig+0x1fe>
 8004c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c7e:	d006      	beq.n	8004c8e <UART_SetConfig+0x20a>
 8004c80:	e00b      	b.n	8004c9a <UART_SetConfig+0x216>
 8004c82:	2300      	movs	r3, #0
 8004c84:	77fb      	strb	r3, [r7, #31]
 8004c86:	e0a1      	b.n	8004dcc <UART_SetConfig+0x348>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	77fb      	strb	r3, [r7, #31]
 8004c8c:	e09e      	b.n	8004dcc <UART_SetConfig+0x348>
 8004c8e:	2304      	movs	r3, #4
 8004c90:	77fb      	strb	r3, [r7, #31]
 8004c92:	e09b      	b.n	8004dcc <UART_SetConfig+0x348>
 8004c94:	2308      	movs	r3, #8
 8004c96:	77fb      	strb	r3, [r7, #31]
 8004c98:	e098      	b.n	8004dcc <UART_SetConfig+0x348>
 8004c9a:	2310      	movs	r3, #16
 8004c9c:	77fb      	strb	r3, [r7, #31]
 8004c9e:	e095      	b.n	8004dcc <UART_SetConfig+0x348>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a2f      	ldr	r2, [pc, #188]	; (8004d64 <UART_SetConfig+0x2e0>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d125      	bne.n	8004cf6 <UART_SetConfig+0x272>
 8004caa:	4b29      	ldr	r3, [pc, #164]	; (8004d50 <UART_SetConfig+0x2cc>)
 8004cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cb8:	d017      	beq.n	8004cea <UART_SetConfig+0x266>
 8004cba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cbe:	d817      	bhi.n	8004cf0 <UART_SetConfig+0x26c>
 8004cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc4:	d00b      	beq.n	8004cde <UART_SetConfig+0x25a>
 8004cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cca:	d811      	bhi.n	8004cf0 <UART_SetConfig+0x26c>
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d003      	beq.n	8004cd8 <UART_SetConfig+0x254>
 8004cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd4:	d006      	beq.n	8004ce4 <UART_SetConfig+0x260>
 8004cd6:	e00b      	b.n	8004cf0 <UART_SetConfig+0x26c>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	77fb      	strb	r3, [r7, #31]
 8004cdc:	e076      	b.n	8004dcc <UART_SetConfig+0x348>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	77fb      	strb	r3, [r7, #31]
 8004ce2:	e073      	b.n	8004dcc <UART_SetConfig+0x348>
 8004ce4:	2304      	movs	r3, #4
 8004ce6:	77fb      	strb	r3, [r7, #31]
 8004ce8:	e070      	b.n	8004dcc <UART_SetConfig+0x348>
 8004cea:	2308      	movs	r3, #8
 8004cec:	77fb      	strb	r3, [r7, #31]
 8004cee:	e06d      	b.n	8004dcc <UART_SetConfig+0x348>
 8004cf0:	2310      	movs	r3, #16
 8004cf2:	77fb      	strb	r3, [r7, #31]
 8004cf4:	e06a      	b.n	8004dcc <UART_SetConfig+0x348>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1b      	ldr	r2, [pc, #108]	; (8004d68 <UART_SetConfig+0x2e4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d138      	bne.n	8004d72 <UART_SetConfig+0x2ee>
 8004d00:	4b13      	ldr	r3, [pc, #76]	; (8004d50 <UART_SetConfig+0x2cc>)
 8004d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d06:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004d0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d0e:	d017      	beq.n	8004d40 <UART_SetConfig+0x2bc>
 8004d10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d14:	d82a      	bhi.n	8004d6c <UART_SetConfig+0x2e8>
 8004d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d1a:	d00b      	beq.n	8004d34 <UART_SetConfig+0x2b0>
 8004d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d20:	d824      	bhi.n	8004d6c <UART_SetConfig+0x2e8>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <UART_SetConfig+0x2aa>
 8004d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d2a:	d006      	beq.n	8004d3a <UART_SetConfig+0x2b6>
 8004d2c:	e01e      	b.n	8004d6c <UART_SetConfig+0x2e8>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	77fb      	strb	r3, [r7, #31]
 8004d32:	e04b      	b.n	8004dcc <UART_SetConfig+0x348>
 8004d34:	2302      	movs	r3, #2
 8004d36:	77fb      	strb	r3, [r7, #31]
 8004d38:	e048      	b.n	8004dcc <UART_SetConfig+0x348>
 8004d3a:	2304      	movs	r3, #4
 8004d3c:	77fb      	strb	r3, [r7, #31]
 8004d3e:	e045      	b.n	8004dcc <UART_SetConfig+0x348>
 8004d40:	2308      	movs	r3, #8
 8004d42:	77fb      	strb	r3, [r7, #31]
 8004d44:	e042      	b.n	8004dcc <UART_SetConfig+0x348>
 8004d46:	bf00      	nop
 8004d48:	efff69f3 	.word	0xefff69f3
 8004d4c:	40011000 	.word	0x40011000
 8004d50:	40023800 	.word	0x40023800
 8004d54:	40004400 	.word	0x40004400
 8004d58:	40004800 	.word	0x40004800
 8004d5c:	40004c00 	.word	0x40004c00
 8004d60:	40005000 	.word	0x40005000
 8004d64:	40011400 	.word	0x40011400
 8004d68:	40007800 	.word	0x40007800
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	77fb      	strb	r3, [r7, #31]
 8004d70:	e02c      	b.n	8004dcc <UART_SetConfig+0x348>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a72      	ldr	r2, [pc, #456]	; (8004f40 <UART_SetConfig+0x4bc>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d125      	bne.n	8004dc8 <UART_SetConfig+0x344>
 8004d7c:	4b71      	ldr	r3, [pc, #452]	; (8004f44 <UART_SetConfig+0x4c0>)
 8004d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004d86:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d8a:	d017      	beq.n	8004dbc <UART_SetConfig+0x338>
 8004d8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d90:	d817      	bhi.n	8004dc2 <UART_SetConfig+0x33e>
 8004d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d96:	d00b      	beq.n	8004db0 <UART_SetConfig+0x32c>
 8004d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d9c:	d811      	bhi.n	8004dc2 <UART_SetConfig+0x33e>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <UART_SetConfig+0x326>
 8004da2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004da6:	d006      	beq.n	8004db6 <UART_SetConfig+0x332>
 8004da8:	e00b      	b.n	8004dc2 <UART_SetConfig+0x33e>
 8004daa:	2300      	movs	r3, #0
 8004dac:	77fb      	strb	r3, [r7, #31]
 8004dae:	e00d      	b.n	8004dcc <UART_SetConfig+0x348>
 8004db0:	2302      	movs	r3, #2
 8004db2:	77fb      	strb	r3, [r7, #31]
 8004db4:	e00a      	b.n	8004dcc <UART_SetConfig+0x348>
 8004db6:	2304      	movs	r3, #4
 8004db8:	77fb      	strb	r3, [r7, #31]
 8004dba:	e007      	b.n	8004dcc <UART_SetConfig+0x348>
 8004dbc:	2308      	movs	r3, #8
 8004dbe:	77fb      	strb	r3, [r7, #31]
 8004dc0:	e004      	b.n	8004dcc <UART_SetConfig+0x348>
 8004dc2:	2310      	movs	r3, #16
 8004dc4:	77fb      	strb	r3, [r7, #31]
 8004dc6:	e001      	b.n	8004dcc <UART_SetConfig+0x348>
 8004dc8:	2310      	movs	r3, #16
 8004dca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	69db      	ldr	r3, [r3, #28]
 8004dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd4:	d15b      	bne.n	8004e8e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004dd6:	7ffb      	ldrb	r3, [r7, #31]
 8004dd8:	2b08      	cmp	r3, #8
 8004dda:	d828      	bhi.n	8004e2e <UART_SetConfig+0x3aa>
 8004ddc:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <UART_SetConfig+0x360>)
 8004dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de2:	bf00      	nop
 8004de4:	08004e09 	.word	0x08004e09
 8004de8:	08004e11 	.word	0x08004e11
 8004dec:	08004e19 	.word	0x08004e19
 8004df0:	08004e2f 	.word	0x08004e2f
 8004df4:	08004e1f 	.word	0x08004e1f
 8004df8:	08004e2f 	.word	0x08004e2f
 8004dfc:	08004e2f 	.word	0x08004e2f
 8004e00:	08004e2f 	.word	0x08004e2f
 8004e04:	08004e27 	.word	0x08004e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e08:	f7fe f8f2 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 8004e0c:	61b8      	str	r0, [r7, #24]
        break;
 8004e0e:	e013      	b.n	8004e38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e10:	f7fe f902 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 8004e14:	61b8      	str	r0, [r7, #24]
        break;
 8004e16:	e00f      	b.n	8004e38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e18:	4b4b      	ldr	r3, [pc, #300]	; (8004f48 <UART_SetConfig+0x4c4>)
 8004e1a:	61bb      	str	r3, [r7, #24]
        break;
 8004e1c:	e00c      	b.n	8004e38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e1e:	f7fd ffd5 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 8004e22:	61b8      	str	r0, [r7, #24]
        break;
 8004e24:	e008      	b.n	8004e38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e2a:	61bb      	str	r3, [r7, #24]
        break;
 8004e2c:	e004      	b.n	8004e38 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	77bb      	strb	r3, [r7, #30]
        break;
 8004e36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d074      	beq.n	8004f28 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	005a      	lsls	r2, r3, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	085b      	lsrs	r3, r3, #1
 8004e48:	441a      	add	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	2b0f      	cmp	r3, #15
 8004e58:	d916      	bls.n	8004e88 <UART_SetConfig+0x404>
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e60:	d212      	bcs.n	8004e88 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	f023 030f 	bic.w	r3, r3, #15
 8004e6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	085b      	lsrs	r3, r3, #1
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	89fb      	ldrh	r3, [r7, #14]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	89fa      	ldrh	r2, [r7, #14]
 8004e84:	60da      	str	r2, [r3, #12]
 8004e86:	e04f      	b.n	8004f28 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	77bb      	strb	r3, [r7, #30]
 8004e8c:	e04c      	b.n	8004f28 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e8e:	7ffb      	ldrb	r3, [r7, #31]
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d828      	bhi.n	8004ee6 <UART_SetConfig+0x462>
 8004e94:	a201      	add	r2, pc, #4	; (adr r2, 8004e9c <UART_SetConfig+0x418>)
 8004e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9a:	bf00      	nop
 8004e9c:	08004ec1 	.word	0x08004ec1
 8004ea0:	08004ec9 	.word	0x08004ec9
 8004ea4:	08004ed1 	.word	0x08004ed1
 8004ea8:	08004ee7 	.word	0x08004ee7
 8004eac:	08004ed7 	.word	0x08004ed7
 8004eb0:	08004ee7 	.word	0x08004ee7
 8004eb4:	08004ee7 	.word	0x08004ee7
 8004eb8:	08004ee7 	.word	0x08004ee7
 8004ebc:	08004edf 	.word	0x08004edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec0:	f7fe f896 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 8004ec4:	61b8      	str	r0, [r7, #24]
        break;
 8004ec6:	e013      	b.n	8004ef0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ec8:	f7fe f8a6 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 8004ecc:	61b8      	str	r0, [r7, #24]
        break;
 8004ece:	e00f      	b.n	8004ef0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ed0:	4b1d      	ldr	r3, [pc, #116]	; (8004f48 <UART_SetConfig+0x4c4>)
 8004ed2:	61bb      	str	r3, [r7, #24]
        break;
 8004ed4:	e00c      	b.n	8004ef0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ed6:	f7fd ff79 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 8004eda:	61b8      	str	r0, [r7, #24]
        break;
 8004edc:	e008      	b.n	8004ef0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ee2:	61bb      	str	r3, [r7, #24]
        break;
 8004ee4:	e004      	b.n	8004ef0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	77bb      	strb	r3, [r7, #30]
        break;
 8004eee:	bf00      	nop
    }

    if (pclk != 0U)
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d018      	beq.n	8004f28 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	085a      	lsrs	r2, r3, #1
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	441a      	add	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	2b0f      	cmp	r3, #15
 8004f0e:	d909      	bls.n	8004f24 <UART_SetConfig+0x4a0>
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f16:	d205      	bcs.n	8004f24 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	60da      	str	r2, [r3, #12]
 8004f22:	e001      	b.n	8004f28 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004f34:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3720      	adds	r7, #32
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40007c00 	.word	0x40007c00
 8004f44:	40023800 	.word	0x40023800
 8004f48:	00f42400 	.word	0x00f42400

08004f4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00a      	beq.n	8004fba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00a      	beq.n	8004ffe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00a      	beq.n	8005020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005028:	2b00      	cmp	r3, #0
 800502a:	d01a      	beq.n	8005062 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800504a:	d10a      	bne.n	8005062 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	605a      	str	r2, [r3, #4]
  }
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af02      	add	r7, sp, #8
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050a0:	f7fc fb3e 	bl	8001720 <HAL_GetTick>
 80050a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d10e      	bne.n	80050d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f81b 	bl	80050fe <UART_WaitOnFlagUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e011      	b.n	80050f6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2220      	movs	r2, #32
 80050d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b09c      	sub	sp, #112	; 0x70
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	603b      	str	r3, [r7, #0]
 800510a:	4613      	mov	r3, r2
 800510c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800510e:	e0a7      	b.n	8005260 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005110:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005116:	f000 80a3 	beq.w	8005260 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800511a:	f7fc fb01 	bl	8001720 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005126:	429a      	cmp	r2, r3
 8005128:	d302      	bcc.n	8005130 <UART_WaitOnFlagUntilTimeout+0x32>
 800512a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800512c:	2b00      	cmp	r3, #0
 800512e:	d13f      	bne.n	80051b0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800513e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005140:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005144:	667b      	str	r3, [r7, #100]	; 0x64
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800514e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005150:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005154:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800515c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e6      	bne.n	8005130 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3308      	adds	r3, #8
 8005168:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005174:	f023 0301 	bic.w	r3, r3, #1
 8005178:	663b      	str	r3, [r7, #96]	; 0x60
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3308      	adds	r3, #8
 8005180:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005182:	64ba      	str	r2, [r7, #72]	; 0x48
 8005184:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005188:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e5      	bne.n	8005162 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2220      	movs	r2, #32
 800519a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2220      	movs	r2, #32
 80051a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e068      	b.n	8005282 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0304 	and.w	r3, r3, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d050      	beq.n	8005260 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051cc:	d148      	bne.n	8005260 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	e853 3f00 	ldrex	r3, [r3]
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f6:	637b      	str	r3, [r7, #52]	; 0x34
 80051f8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1e6      	bne.n	80051d8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3308      	adds	r3, #8
 8005210:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	613b      	str	r3, [r7, #16]
   return(result);
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f023 0301 	bic.w	r3, r3, #1
 8005220:	66bb      	str	r3, [r7, #104]	; 0x68
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3308      	adds	r3, #8
 8005228:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800522a:	623a      	str	r2, [r7, #32]
 800522c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	69f9      	ldr	r1, [r7, #28]
 8005230:	6a3a      	ldr	r2, [r7, #32]
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	61bb      	str	r3, [r7, #24]
   return(result);
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e5      	bne.n	800520a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2220      	movs	r2, #32
 8005242:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2220      	movs	r2, #32
 8005248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2220      	movs	r2, #32
 8005250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e010      	b.n	8005282 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	69da      	ldr	r2, [r3, #28]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	4013      	ands	r3, r2
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	429a      	cmp	r2, r3
 800526e:	bf0c      	ite	eq
 8005270:	2301      	moveq	r3, #1
 8005272:	2300      	movne	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	461a      	mov	r2, r3
 8005278:	79fb      	ldrb	r3, [r7, #7]
 800527a:	429a      	cmp	r2, r3
 800527c:	f43f af48 	beq.w	8005110 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3770      	adds	r7, #112	; 0x70
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800528c:	b084      	sub	sp, #16
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	f107 001c 	add.w	r0, r7, #28
 800529a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d126      	bne.n	80052f2 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68da      	ldr	r2, [r3, #12]
 80052b4:	4b38      	ldr	r3, [pc, #224]	; (8005398 <USB_CoreInit+0x10c>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f043 0210 	orr.w	r2, r3, #16
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d105      	bne.n	80052e6 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fad0 	bl	800588c <USB_CoreReset>
 80052ec:	4603      	mov	r3, r0
 80052ee:	73fb      	strb	r3, [r7, #15]
 80052f0:	e03a      	b.n	8005368 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	d126      	bne.n	8005346 <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	4b23      	ldr	r3, [pc, #140]	; (8005398 <USB_CoreInit+0x10c>)
 800530a:	4013      	ands	r3, r2
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f023 0210 	bic.w	r2, r3, #16
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8005328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800532a:	2b01      	cmp	r3, #1
 800532c:	d105      	bne.n	800533a <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 faa6 	bl	800588c <USB_CoreReset>
 8005340:	4603      	mov	r3, r0
 8005342:	73fb      	strb	r3, [r7, #15]
 8005344:	e010      	b.n	8005368 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fa9a 	bl	800588c <USB_CoreReset>
 8005358:	4603      	mov	r3, r0
 800535a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536a:	2b01      	cmp	r3, #1
 800536c:	d10b      	bne.n	8005386 <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f043 0206 	orr.w	r2, r3, #6
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f043 0220 	orr.w	r2, r3, #32
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005386:	7bfb      	ldrb	r3, [r7, #15]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005392:	b004      	add	sp, #16
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	ffbdffbf 	.word	0xffbdffbf

0800539c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f023 0201 	bic.w	r2, r3, #1
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b084      	sub	sp, #16
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
 80053c6:	460b      	mov	r3, r1
 80053c8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80053da:	78fb      	ldrb	r3, [r7, #3]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d115      	bne.n	800540c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053ec:	2001      	movs	r0, #1
 80053ee:	f7fc f9a3 	bl	8001738 <HAL_Delay>
      ms++;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	3301      	adds	r3, #1
 80053f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fa39 	bl	8005870 <USB_GetMode>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b01      	cmp	r3, #1
 8005402:	d01e      	beq.n	8005442 <USB_SetCurrentMode+0x84>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b31      	cmp	r3, #49	; 0x31
 8005408:	d9f0      	bls.n	80053ec <USB_SetCurrentMode+0x2e>
 800540a:	e01a      	b.n	8005442 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800540c:	78fb      	ldrb	r3, [r7, #3]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d115      	bne.n	800543e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800541e:	2001      	movs	r0, #1
 8005420:	f7fc f98a 	bl	8001738 <HAL_Delay>
      ms++;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3301      	adds	r3, #1
 8005428:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 fa20 	bl	8005870 <USB_GetMode>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <USB_SetCurrentMode+0x84>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b31      	cmp	r3, #49	; 0x31
 800543a:	d9f0      	bls.n	800541e <USB_SetCurrentMode+0x60>
 800543c:	e001      	b.n	8005442 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e005      	b.n	800544e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b32      	cmp	r3, #50	; 0x32
 8005446:	d101      	bne.n	800544c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
	...

08005458 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005458:	b084      	sub	sp, #16
 800545a:	b580      	push	{r7, lr}
 800545c:	b086      	sub	sp, #24
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800546a:	2300      	movs	r3, #0
 800546c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	e009      	b.n	800548c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	3340      	adds	r3, #64	; 0x40
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	4413      	add	r3, r2
 8005482:	2200      	movs	r2, #0
 8005484:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	3301      	adds	r3, #1
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	2b0e      	cmp	r3, #14
 8005490:	d9f2      	bls.n	8005478 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d11c      	bne.n	80054d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054a6:	f043 0302 	orr.w	r3, r3, #2
 80054aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	e005      	b.n	80054de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054e4:	461a      	mov	r2, r3
 80054e6:	2300      	movs	r3, #0
 80054e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f0:	4619      	mov	r1, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f8:	461a      	mov	r2, r3
 80054fa:	680b      	ldr	r3, [r1, #0]
 80054fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	2b01      	cmp	r3, #1
 8005502:	d10c      	bne.n	800551e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d104      	bne.n	8005514 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800550a:	2100      	movs	r1, #0
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f975 	bl	80057fc <USB_SetDevSpeed>
 8005512:	e018      	b.n	8005546 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005514:	2101      	movs	r1, #1
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f970 	bl	80057fc <USB_SetDevSpeed>
 800551c:	e013      	b.n	8005546 <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800551e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005520:	2b03      	cmp	r3, #3
 8005522:	d10c      	bne.n	800553e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005526:	2b00      	cmp	r3, #0
 8005528:	d104      	bne.n	8005534 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800552a:	2100      	movs	r1, #0
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f965 	bl	80057fc <USB_SetDevSpeed>
 8005532:	e008      	b.n	8005546 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005534:	2101      	movs	r1, #1
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f960 	bl	80057fc <USB_SetDevSpeed>
 800553c:	e003      	b.n	8005546 <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800553e:	2103      	movs	r1, #3
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f95b 	bl	80057fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005546:	2110      	movs	r1, #16
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f8f3 	bl	8005734 <USB_FlushTxFifo>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f91f 	bl	800579c <USB_FlushRxFifo>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800556e:	461a      	mov	r2, r3
 8005570:	2300      	movs	r3, #0
 8005572:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800557a:	461a      	mov	r2, r3
 800557c:	2300      	movs	r3, #0
 800557e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005586:	461a      	mov	r2, r3
 8005588:	2300      	movs	r3, #0
 800558a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800558c:	2300      	movs	r3, #0
 800558e:	613b      	str	r3, [r7, #16]
 8005590:	e043      	b.n	800561a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055a8:	d118      	bne.n	80055dc <USB_DevInit+0x184>
    {
      if (i == 0U)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10a      	bne.n	80055c6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	461a      	mov	r2, r3
 80055be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055c2:	6013      	str	r3, [r2, #0]
 80055c4:	e013      	b.n	80055ee <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d2:	461a      	mov	r2, r3
 80055d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	e008      	b.n	80055ee <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e8:	461a      	mov	r2, r3
 80055ea:	2300      	movs	r3, #0
 80055ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fa:	461a      	mov	r2, r3
 80055fc:	2300      	movs	r3, #0
 80055fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560c:	461a      	mov	r2, r3
 800560e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005612:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	3301      	adds	r3, #1
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	429a      	cmp	r2, r3
 8005620:	d3b7      	bcc.n	8005592 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005622:	2300      	movs	r3, #0
 8005624:	613b      	str	r3, [r7, #16]
 8005626:	e043      	b.n	80056b0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800563a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800563e:	d118      	bne.n	8005672 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10a      	bne.n	800565c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005652:	461a      	mov	r2, r3
 8005654:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005658:	6013      	str	r3, [r2, #0]
 800565a:	e013      	b.n	8005684 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005668:	461a      	mov	r2, r3
 800566a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	e008      	b.n	8005684 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567e:	461a      	mov	r2, r3
 8005680:	2300      	movs	r3, #0
 8005682:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005690:	461a      	mov	r2, r3
 8005692:	2300      	movs	r3, #0
 8005694:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a2:	461a      	mov	r2, r3
 80056a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	3301      	adds	r3, #1
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d3b7      	bcc.n	8005628 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80056d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d105      	bne.n	80056ec <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	f043 0210 	orr.w	r2, r3, #16
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	699a      	ldr	r2, [r3, #24]
 80056f0:	4b0e      	ldr	r3, [pc, #56]	; (800572c <USB_DevInit+0x2d4>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80056f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d005      	beq.n	800570a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	f043 0208 	orr.w	r2, r3, #8
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800570a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800570c:	2b01      	cmp	r3, #1
 800570e:	d105      	bne.n	800571c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699a      	ldr	r2, [r3, #24]
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <USB_DevInit+0x2d8>)
 8005716:	4313      	orrs	r3, r2
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800571c:	7dfb      	ldrb	r3, [r7, #23]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005728:	b004      	add	sp, #16
 800572a:	4770      	bx	lr
 800572c:	803c3800 	.word	0x803c3800
 8005730:	40000004 	.word	0x40000004

08005734 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3301      	adds	r3, #1
 8005746:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4a13      	ldr	r2, [pc, #76]	; (8005798 <USB_FlushTxFifo+0x64>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d901      	bls.n	8005754 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e01b      	b.n	800578c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	daf2      	bge.n	8005742 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	019b      	lsls	r3, r3, #6
 8005764:	f043 0220 	orr.w	r2, r3, #32
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3301      	adds	r3, #1
 8005770:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4a08      	ldr	r2, [pc, #32]	; (8005798 <USB_FlushTxFifo+0x64>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d901      	bls.n	800577e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e006      	b.n	800578c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0320 	and.w	r3, r3, #32
 8005786:	2b20      	cmp	r3, #32
 8005788:	d0f0      	beq.n	800576c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	00030d40 	.word	0x00030d40

0800579c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	3301      	adds	r3, #1
 80057ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	4a11      	ldr	r2, [pc, #68]	; (80057f8 <USB_FlushRxFifo+0x5c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d901      	bls.n	80057ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e018      	b.n	80057ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	daf2      	bge.n	80057a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2210      	movs	r2, #16
 80057ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3301      	adds	r3, #1
 80057d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4a08      	ldr	r2, [pc, #32]	; (80057f8 <USB_FlushRxFifo+0x5c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d901      	bls.n	80057de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e006      	b.n	80057ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f003 0310 	and.w	r3, r3, #16
 80057e6:	2b10      	cmp	r3, #16
 80057e8:	d0f0      	beq.n	80057cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	00030d40 	.word	0x00030d40

080057fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b085      	sub	sp, #20
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	78fb      	ldrb	r3, [r7, #3]
 8005816:	68f9      	ldr	r1, [r7, #12]
 8005818:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800581c:	4313      	orrs	r3, r2
 800581e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005848:	f023 0303 	bic.w	r3, r3, #3
 800584c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800585c:	f043 0302 	orr.w	r3, r3, #2
 8005860:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	f003 0301 	and.w	r3, r3, #1
}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	3301      	adds	r3, #1
 800589c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	4a13      	ldr	r2, [pc, #76]	; (80058f0 <USB_CoreReset+0x64>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d901      	bls.n	80058aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e01b      	b.n	80058e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	daf2      	bge.n	8005898 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	f043 0201 	orr.w	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3301      	adds	r3, #1
 80058c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4a09      	ldr	r2, [pc, #36]	; (80058f0 <USB_CoreReset+0x64>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d901      	bls.n	80058d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e006      	b.n	80058e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d0f0      	beq.n	80058c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	00030d40 	.word	0x00030d40

080058f4 <__libc_init_array>:
 80058f4:	b570      	push	{r4, r5, r6, lr}
 80058f6:	4d0d      	ldr	r5, [pc, #52]	; (800592c <__libc_init_array+0x38>)
 80058f8:	4c0d      	ldr	r4, [pc, #52]	; (8005930 <__libc_init_array+0x3c>)
 80058fa:	1b64      	subs	r4, r4, r5
 80058fc:	10a4      	asrs	r4, r4, #2
 80058fe:	2600      	movs	r6, #0
 8005900:	42a6      	cmp	r6, r4
 8005902:	d109      	bne.n	8005918 <__libc_init_array+0x24>
 8005904:	4d0b      	ldr	r5, [pc, #44]	; (8005934 <__libc_init_array+0x40>)
 8005906:	4c0c      	ldr	r4, [pc, #48]	; (8005938 <__libc_init_array+0x44>)
 8005908:	f000 f820 	bl	800594c <_init>
 800590c:	1b64      	subs	r4, r4, r5
 800590e:	10a4      	asrs	r4, r4, #2
 8005910:	2600      	movs	r6, #0
 8005912:	42a6      	cmp	r6, r4
 8005914:	d105      	bne.n	8005922 <__libc_init_array+0x2e>
 8005916:	bd70      	pop	{r4, r5, r6, pc}
 8005918:	f855 3b04 	ldr.w	r3, [r5], #4
 800591c:	4798      	blx	r3
 800591e:	3601      	adds	r6, #1
 8005920:	e7ee      	b.n	8005900 <__libc_init_array+0xc>
 8005922:	f855 3b04 	ldr.w	r3, [r5], #4
 8005926:	4798      	blx	r3
 8005928:	3601      	adds	r6, #1
 800592a:	e7f2      	b.n	8005912 <__libc_init_array+0x1e>
 800592c:	0800a18c 	.word	0x0800a18c
 8005930:	0800a18c 	.word	0x0800a18c
 8005934:	0800a18c 	.word	0x0800a18c
 8005938:	0800a190 	.word	0x0800a190

0800593c <memset>:
 800593c:	4402      	add	r2, r0
 800593e:	4603      	mov	r3, r0
 8005940:	4293      	cmp	r3, r2
 8005942:	d100      	bne.n	8005946 <memset+0xa>
 8005944:	4770      	bx	lr
 8005946:	f803 1b01 	strb.w	r1, [r3], #1
 800594a:	e7f9      	b.n	8005940 <memset+0x4>

0800594c <_init>:
 800594c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594e:	bf00      	nop
 8005950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005952:	bc08      	pop	{r3}
 8005954:	469e      	mov	lr, r3
 8005956:	4770      	bx	lr

08005958 <_fini>:
 8005958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595a:	bf00      	nop
 800595c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800595e:	bc08      	pop	{r3}
 8005960:	469e      	mov	lr, r3
 8005962:	4770      	bx	lr
